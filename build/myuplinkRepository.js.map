{
  "version": 3,
  "sources": ["../src/myUplinkRepository.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport type { AlarmsPaged } from './models/AlarmsPaged';\nimport type { PagedSystemResult } from './models/PagedSystemResult';\nimport type { ParameterData } from './models/ParameterData';\nimport type { Logger } from './types';\n\nfunction setProperty<K extends keyof any>(obj: any, propertyName: K, value: any): void {\n    obj[propertyName] = value;\n}\n\n/**\n * Options for configuring the MyUplinkRepository.\n */\nexport interface MyUplinkOptions {\n    /**\n     * The base URL for the MyUplink API.\n     */\n    baseUrl: string;\n\n    /**\n     * The timeout duration for API requests.\n     */\n    timeout: number;\n\n    /**\n     * The user agent string for API requests.\n     */\n    userAgent: string;\n\n    /**\n     * The language for API requests.\n     */\n    language: string;\n}\n\n/**\n * Creates an instance of MyUplinkRepository.\n *\n * @param options - The options for configuring the repository.\n * @param log - The logger instance for logging.\n */\nexport class MyUplinkRepository {\n    /**\n     * Constructs a new instance of MyUplinkRepository.\n     *\n     * @param options - The options for configuring the repository.\n     * @param log - The logger instance for logging.\n     */\n    constructor(options: MyUplinkOptions, log: Logger) {\n        this.log = log;\n        this.options = options;\n\n        axios.defaults.baseURL = options.baseUrl;\n        axios.defaults.headers.common['user-agent'] = options.userAgent;\n        axios.defaults.timeout = options.timeout;\n    }\n\n    private log: Logger;\n    private options: MyUplinkOptions;\n\n    /**\n     * Retrieves systems and devices associated.\n     *\n     * @param accessToken - The access token for authentication.\n     * @returns A promise that resolves to a paged result of systems.\n     */\n    getSystemsAndDevicesAsync(accessToken: string): Promise<PagedSystemResult> {\n        return this.getFromMyUplinkAsync<PagedSystemResult>('/v2/systems/me', accessToken);\n    }\n\n    /**\n     * Retrieves device points for a specific device.\n     *\n     * @param deviceId - The ID of the device.\n     * @param accessToken - The access token for authentication.\n     * @returns A promise that resolves to an array of parameter data.\n     */\n    getDevicePointsAsync(deviceId: string, accessToken: string): Promise<ParameterData[]> {\n        return this.getFromMyUplinkAsync<ParameterData[]>(`/v3/devices/${deviceId}/points`, accessToken);\n    }\n\n    /**\n     * Sets a device point for a specific device.\n     *\n     * @param deviceId - The ID of the device.\n     * @param accessToken - The access token for authentication.\n     * @param parameterId - The ID of the parameter to set.\n     * @param value - The value to set for the parameter.\n     * @returns A promise that resolves when the device point is set.\n     */\n    setDevicePointAsync(deviceId: string, accessToken: string, parameterId: string, value: string): Promise<any> {\n        const body = {};\n        setProperty(body, parameterId, value);\n        return this.setDevicePointsAsync(deviceId, accessToken, body);\n    }\n\n    /**\n     * Sets multiple device points for a specific device.\n     *\n     * @param deviceId - The ID of the device.\n     * @param accessToken - The access token for authentication.\n     * @param keyValueDictionary - A dictionary of parameter IDs and values to set.\n     * @returns A promise that resolves when the device points are set.\n     */\n    setDevicePointsAsync(\n        deviceId: string,\n        accessToken: string,\n        keyValueDictionary: Record<string, string>,\n    ): Promise<any> {\n        return this.patchToMyUplinkAsync<any>(`/v2/devices/${deviceId}/points`, keyValueDictionary, accessToken);\n    }\n\n    /**\n     * Retrieves active notifications for a specific system.\n     *\n     * @param systemId - The ID of the system.\n     * @param accessToken - The access token for authentication.\n     * @returns A promise that resolves to a paged result of active alarms.\n     */\n    getActiveNotificationsAsync(systemId: string, accessToken: string): Promise<AlarmsPaged> {\n        return this.getFromMyUplinkAsync<AlarmsPaged>(\n            `/v2/systems/${systemId}/notifications/active?itemsPerPage=100`,\n            accessToken,\n        );\n    }\n\n    private async getFromMyUplinkAsync<T>(url: string, accessToken: string): Promise<T> {\n        const lang = this.options.language;\n        this.log.debug(`GET ${url} (lang: ${lang})`);\n        try {\n            const { data } = await axios.get<T>(url, {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                    'Accept-Language': lang,\n                },\n            });\n            this.log.silly(`Response from GET ${url} (lang: ${lang}): ${JSON.stringify(data, null, ' ')}`);\n            return data;\n        } catch (error) {\n            throw this.checkError(url, error);\n        }\n    }\n\n    private async patchToMyUplinkAsync<T>(url: string, body: any, accessToken: string): Promise<T> {\n        const lang = this.options.language;\n        this.log.debug(`PATCH ${url} (lang: ${lang})`);\n        this.log.silly(`PATCH body: ${JSON.stringify(body, null, ' ')}`);\n        try {\n            const { data } = await axios.patch<T>(url, body, {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                    'Accept-Language': lang,\n                },\n            });\n            this.log.debug(`Response from PATCH ${url} (lang: ${lang}): ${JSON.stringify(data, null, ' ')}`);\n            return data;\n        } catch (error) {\n            throw this.checkError(url, error);\n        }\n    }\n\n    private checkError(suburl: string, error: unknown): unknown {\n        this.log.error(`error from ${suburl}`);\n        this.log.error(JSON.stringify(error, null, ' '));\n        if (axios.isAxiosError(error)) {\n            const axiosError = error as axios.AxiosError;\n            if (axiosError.response != null) {\n                if (axiosError.response.data != null) {\n                    const responseText = JSON.stringify(axiosError.response.data, null, ' ');\n                    const errorMessage = `${axiosError.response.statusText}: ${responseText}`;\n                    return new Error(errorMessage);\n                }\n                return new Error(axiosError.response.statusText);\n            }\n        }\n        return error;\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
