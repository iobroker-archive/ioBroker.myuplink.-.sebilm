{
  "version": 3,
  "sources": ["../src/myuplinkRepository.ts"],
  "sourcesContent": ["import axios, { AxiosError } from 'axios';\nimport { AlarmsPaged } from './models/AlarmsPaged';\nimport { PagedSystemResult } from './models/PagedSystemResult';\nimport { ParameterData } from './models/ParameterData';\n\nexport default interface MyUplinkOptions {\n    baseUrl: string;\n    timeout: number;\n    userAgent: string;\n    language: string;\n}\n\nexport class MyUplinkRepository {\n    constructor(options: MyUplinkOptions, log: ioBroker.Log) {\n        this.log = log;\n        this.options = options;\n\n        axios.defaults.baseURL = options.baseUrl;\n        axios.defaults.headers.common['user-agent'] = options.userAgent;\n        axios.defaults.timeout = options.timeout;\n    }\n\n    private log: ioBroker.Log;\n    private options: MyUplinkOptions;\n\n    async getSystemsAndDevices(accessToken: string): Promise<PagedSystemResult> {\n        return await this.getFromMyUplink<PagedSystemResult>('/v2/systems/me', accessToken);\n    }\n\n    async getDevicePoints(deviceId: string, accessToken: string): Promise<ParameterData[]> {\n        return await this.getFromMyUplink<ParameterData[]>(`/v3/devices/${deviceId}/points`, accessToken);\n    }\n\n    async getActiveNotifications(systemId: string, accessToken: string): Promise<AlarmsPaged> {\n        return await this.getFromMyUplink<AlarmsPaged>(`/v2/systems/${systemId}/notifications/active?itemsPerPage=100`, accessToken);\n    }\n\n    private async getFromMyUplink<T>(suburl: string, accessToken: string): Promise<T> {\n        const lang = this.options.language;\n        this.log.debug(`GET ${suburl} (lang: ${lang})`);\n        try {\n            const { data } = await axios.get<T>(suburl, {\n                headers: {\n                    Authorization: 'Bearer ' + accessToken,\n                    'Accept-Language': lang,\n                },\n            });\n            this.log.silly(JSON.stringify(data, null, ' '));\n            return data;\n        } catch (error) {\n            throw this.checkError(suburl, error);\n        }\n    }\n\n    private checkError(suburl: string, error: unknown): unknown {\n        this.log.error(`error from ${suburl}`);\n        if (axios.isAxiosError(error)) {\n            const axiosError = error as AxiosError;\n            if (axiosError.response != null) {\n                if (axiosError.response.data != null) {\n                    const responseText = JSON.stringify(axiosError.response.data, null, ' ');\n                    const errorMessage = `${axiosError.response.statusText}: ${responseText}`;\n                    return new Error(errorMessage);\n                } else {\n                    return new Error(axiosError.response.statusText);\n                }\n            }\n        }\n        return error;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkC;AAY3B,MAAM,mBAAmB;AAAA,EAC5B,YAAY,SAA0B,KAAmB;AACrD,SAAK,MAAM;AACX,SAAK,UAAU;AAEf,iBAAAA,QAAM,SAAS,UAAU,QAAQ;AACjC,iBAAAA,QAAM,SAAS,QAAQ,OAAO,gBAAgB,QAAQ;AACtD,iBAAAA,QAAM,SAAS,UAAU,QAAQ;AAAA,EACrC;AAAA,EAKA,MAAM,qBAAqB,aAAiD;AACxE,WAAO,MAAM,KAAK,gBAAmC,kBAAkB,WAAW;AAAA,EACtF;AAAA,EAEA,MAAM,gBAAgB,UAAkB,aAA+C;AACnF,WAAO,MAAM,KAAK,gBAAiC,eAAe,mBAAmB,WAAW;AAAA,EACpG;AAAA,EAEA,MAAM,uBAAuB,UAAkB,aAA2C;AACtF,WAAO,MAAM,KAAK,gBAA6B,eAAe,kDAAkD,WAAW;AAAA,EAC/H;AAAA,EAEA,MAAc,gBAAmB,QAAgB,aAAiC;AAC9E,UAAM,OAAO,KAAK,QAAQ;AAC1B,SAAK,IAAI,MAAM,OAAO,iBAAiB,OAAO;AAC9C,QAAI;AACA,YAAM,EAAE,KAAK,IAAI,MAAM,aAAAA,QAAM,IAAO,QAAQ;AAAA,QACxC,SAAS;AAAA,UACL,eAAe,YAAY;AAAA,UAC3B,mBAAmB;AAAA,QACvB;AAAA,MACJ,CAAC;AACD,WAAK,IAAI,MAAM,KAAK,UAAU,MAAM,MAAM,GAAG,CAAC;AAC9C,aAAO;AAAA,IACX,SAAS,OAAP;AACE,YAAM,KAAK,WAAW,QAAQ,KAAK;AAAA,IACvC;AAAA,EACJ;AAAA,EAEQ,WAAW,QAAgB,OAAyB;AACxD,SAAK,IAAI,MAAM,cAAc,QAAQ;AACrC,QAAI,aAAAA,QAAM,aAAa,KAAK,GAAG;AAC3B,YAAM,aAAa;AACnB,UAAI,WAAW,YAAY,MAAM;AAC7B,YAAI,WAAW,SAAS,QAAQ,MAAM;AAClC,gBAAM,eAAe,KAAK,UAAU,WAAW,SAAS,MAAM,MAAM,GAAG;AACvE,gBAAM,eAAe,GAAG,WAAW,SAAS,eAAe;AAC3D,iBAAO,IAAI,MAAM,YAAY;AAAA,QACjC,OAAO;AACH,iBAAO,IAAI,MAAM,WAAW,SAAS,UAAU;AAAA,QACnD;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": ["axios"]
}
