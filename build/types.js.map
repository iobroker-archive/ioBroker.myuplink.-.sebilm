{
  "version": 3,
  "sources": ["../src/types.ts"],
  "sourcesContent": ["export interface Logger {\n    silly(msg: string): void;\n    debug(msg: string): void;\n    info(msg: string): void;\n    error(msg: string): void;\n    warn(msg: string): void;\n}\n\nexport interface DataTarget {\n    CreateSystemAsync(path: string, name: string): Promise<void>;\n    CreateDeviceAsync(path: string, name: string): Promise<void>;\n    CreateCategoryAsync(path: string, name: string): Promise<void>;\n    CreateStringStateAsync(path: string, name: string, value: string, createObject: boolean, role?: string): Promise<void>;\n    CreateBooleanStateAsync(path: string, name: string, role: string, value: boolean, createObject: boolean): Promise<void>;\n    CreateWritableStringObjectAsync(path: string, name: string, role: string, deviceId: string): Promise<void>;\n    CreateParameterObjectAsync(\n        path: string,\n        name: string,\n        deviceId: string | null | undefined,\n        parameterId: string | null | undefined,\n        role: string,\n        writable: boolean,\n        unit: string | undefined,\n        min: number | undefined,\n        max: number | undefined,\n        step: number | undefined,\n        states: Record<string, string> | undefined,\n    ): Promise<void>;\n    SetStateAsync(path: string, value: string | number | boolean | null): Promise<void>;\n}\n\nexport type StateValue = string | number | boolean;\n\nexport type AdapterConfig = ioBroker.AdapterConfig;\nexport type RenameData = ioBroker.RenameData;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
