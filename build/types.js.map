{
  "version": 3,
  "sources": ["../src/types.ts"],
  "sourcesContent": ["/**\n * Logger interface for logging messages at different levels.\n */\nexport interface Logger {\n    /**\n     * Logs a silly level message.\n     *\n     * @param msg - The message to log.\n     */\n    silly(msg: string): void;\n\n    /**\n     * Logs a debug level message.\n     *\n     * @param msg - The message to log.\n     */\n    debug(msg: string): void;\n\n    /**\n     * Logs an info level message.\n     *\n     * @param msg - The message to log.\n     */\n    info(msg: string): void;\n\n    /**\n     * Logs an error level message.\n     *\n     * @param msg - The message to log.\n     */\n    error(msg: string): void;\n\n    /**\n     * Logs a warn level message.\n     *\n     * @param msg - The message to log.\n     */\n    warn(msg: string): void;\n}\n\n/**\n * DataTarget interface for creating and updating various objects asynchronously.\n */\nexport interface DataTarget {\n    /**\n     * Creates a system asynchronously.\n     *\n     * @param path - The path of the system.\n     * @param name - The name of the system.\n     */\n    CreateSystemAsync(path: string, name: string): Promise<void>;\n\n    /**\n     * Creates a device asynchronously.\n     *\n     * @param path - The path of the device.\n     * @param name - The name of the device.\n     */\n    CreateDeviceAsync(path: string, name: string): Promise<void>;\n\n    /**\n     * Creates a category asynchronously.\n     *\n     * @param path - The path of the category.\n     * @param name - The name of the category.\n     */\n    CreateCategoryAsync(path: string, name: string): Promise<void>;\n\n    /**\n     * Creates a string object asynchronously.\n     *\n     * @param path - The path of the object.\n     * @param name - The name of the object.\n     * @param value - The value of the object.\n     * @param createObject - Whether to create the object.\n     * @param role - The role of the object (optional).\n     */\n    CreateStringObjectAsync(\n        path: string,\n        name: string,\n        value: string,\n        createObject: boolean,\n        role?: string,\n    ): Promise<void>;\n\n    /**\n     * Creates a boolean object asynchronously.\n     *\n     * @param path - The path of the object.\n     * @param name - The name of the object.\n     * @param role - The role of the object.\n     * @param value - The value of the object.\n     * @param createObject - Whether to create the object.\n     */\n    CreateBooleanObjectAsync(\n        path: string,\n        name: string,\n        role: string,\n        value: boolean,\n        createObject: boolean,\n    ): Promise<void>;\n\n    /**\n     * Creates a writable string object asynchronously.\n     *\n     * @param path - The path of the object.\n     * @param name - The name of the object.\n     * @param role - The role of the object.\n     * @param deviceId - The device ID.\n     */\n    CreateWritableStringObjectAsync(path: string, name: string, role: string, deviceId: string): Promise<void>;\n\n    /**\n     * Creates or updates a parameter object asynchronously.\n     *\n     * @param path - The path of the object.\n     * @param name - The name of the object.\n     * @param deviceId - The device ID (optional).\n     * @param parameterId - The parameter ID (optional).\n     * @param role - The role of the object.\n     * @param writable - Whether the object is writable.\n     * @param unit - The unit of the object (optional).\n     * @param min - The minimum value of the object (optional).\n     * @param max - The maximum value of the object (optional).\n     * @param step - The step value of the object (optional).\n     * @param states - The states of the object (optional).\n     */\n    CreateOrUpdateParameterObjectAsync(\n        path: string,\n        name: string,\n        deviceId: string | null | undefined,\n        parameterId: string | null | undefined,\n        role: string,\n        writable: boolean,\n        unit: string | undefined,\n        min: number | undefined,\n        max: number | undefined,\n        step: number | undefined,\n        states: Record<string, string> | undefined,\n    ): Promise<void>;\n\n    /**\n     * Sets the state asynchronously.\n     *\n     * @param path - The path of the state.\n     * @param value - The value of the state.\n     */\n    SetStateAsync(path: string, value: string | number | boolean | null): Promise<void>;\n}\n\n/**\n * Type for state values, which can be a string, number, or boolean.\n */\nexport type StateValue = string | number | boolean;\n\n/**\n * Type alias for ioBroker.AdapterConfig.\n */\nexport type AdapterConfig = ioBroker.AdapterConfig;\n\n/**\n * Type alias for ioBroker.RenameData.\n */\nexport type RenameData = ioBroker.RenameData;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
