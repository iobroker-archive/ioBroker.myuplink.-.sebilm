{
  "version": 3,
  "sources": ["../../src/models/ObjectSerializer.ts"],
  "sourcesContent": ["export * from '../models/Address';\nexport * from '../models/AddressResponseModel';\nexport * from '../models/AggregationMethod';\nexport * from '../models/AggregationUnit';\nexport * from '../models/AidMode';\nexport * from '../models/AidModeResponseModel';\nexport * from '../models/Alarm';\nexport * from '../models/AlarmSeverity';\nexport * from '../models/AlarmStatus';\nexport * from '../models/AlarmsPaged';\nexport * from '../models/AvailableMethods';\nexport * from '../models/CloudToDeviceMethodResult';\nexport * from '../models/Country';\nexport * from '../models/Curve';\nexport * from '../models/DataPoint';\nexport * from '../models/DeviceCategoriesModel';\nexport * from '../models/DeviceCategory';\nexport * from '../models/DeviceCategoryModel';\nexport * from '../models/DeviceConnectionState';\nexport * from '../models/DeviceFirmwareInfoResponse';\nexport * from '../models/DeviceInfoResponseModel';\nexport * from '../models/DeviceInfoResponseModelPagedResult';\nexport * from '../models/DeviceInfoSyncResponseModel';\nexport * from '../models/DeviceParameterData';\nexport * from '../models/DevicePremiumResponse';\nexport * from '../models/DeviceResponseModel';\nexport * from '../models/EnumValues';\nexport * from '../models/FirmwareResponseModel';\nexport * from '../models/GroupedDeviceParameterData';\nexport * from '../models/LimitedUserProfile';\nexport * from '../models/PagedSystemResult';\nexport * from '../models/ParameterData';\nexport * from '../models/ParameterDetail';\nexport * from '../models/PatchSystemModel';\nexport * from '../models/PremiumFeatureResponseModel';\nexport * from '../models/PremiumFeatures';\nexport * from '../models/Product';\nexport * from '../models/ProductRegistrationAddress';\nexport * from '../models/ProductRegistrationResponse';\nexport * from '../models/ProductRegistrationResponseWithAddress';\nexport * from '../models/ProductResponseModel';\nexport * from '../models/Properties';\nexport * from '../models/Reported';\nexport * from '../models/ReportedFirmware';\nexport * from '../models/SearchGroupSSG';\nexport * from '../models/SecurityLevel';\nexport * from '../models/SmartHomeModeModel';\nexport * from '../models/SmartMode';\nexport * from '../models/SpotPriceDeliveryModel';\nexport * from '../models/SsqGroupDevice';\nexport * from '../models/Status';\nexport * from '../models/StoreSet';\nexport * from '../models/StoreSetEntry';\nexport * from '../models/SystemDevice';\nexport * from '../models/SystemWithDevices';\nexport * from '../models/UpdateGroupRequest';\nexport * from '../models/UserWithAddress';\nexport * from '../models/V2DevicesDeviceIdSmartHomeCategoriesGet200Response';\nexport * from '../models/VoucherManyRequest';\nexport * from '../models/VoucherSingleRequest';\nexport * from '../models/VoucherType';\nexport * from '../models/ZonePatchRequest';\nexport * from '../models/ZoneResponse';\n\nimport { Address } from '../models/Address';\nimport { AddressResponseModel } from '../models/AddressResponseModel';\nimport { AidModeResponseModel } from '../models/AidModeResponseModel';\nimport { Alarm } from '../models/Alarm';\nimport { AlarmStatus } from '../models/AlarmStatus';\nimport { AlarmsPaged } from '../models/AlarmsPaged';\nimport { AvailableMethods } from '../models/AvailableMethods';\nimport { CloudToDeviceMethodResult } from '../models/CloudToDeviceMethodResult';\nimport { Country } from '../models/Country';\nimport { Curve } from '../models/Curve';\nimport { DataPoint } from '../models/DataPoint';\nimport { DeviceCategoriesModel } from '../models/DeviceCategoriesModel';\nimport { DeviceCategory } from '../models/DeviceCategory';\nimport { DeviceCategoryModel } from '../models/DeviceCategoryModel';\nimport { DeviceFirmwareInfoResponse } from '../models/DeviceFirmwareInfoResponse';\nimport { DeviceInfoResponseModel } from '../models/DeviceInfoResponseModel';\nimport { DeviceInfoResponseModelPagedResult } from '../models/DeviceInfoResponseModelPagedResult';\nimport { DeviceInfoSyncResponseModel } from '../models/DeviceInfoSyncResponseModel';\nimport { DeviceParameterData } from '../models/DeviceParameterData';\nimport { DevicePremiumResponse } from '../models/DevicePremiumResponse';\nimport { DeviceResponseModel } from '../models/DeviceResponseModel';\nimport { EnumValues } from '../models/EnumValues';\nimport { FirmwareResponseModel } from '../models/FirmwareResponseModel';\nimport { GroupedDeviceParameterData } from '../models/GroupedDeviceParameterData';\nimport { LimitedUserProfile } from '../models/LimitedUserProfile';\nimport { PagedSystemResult } from '../models/PagedSystemResult';\nimport { ParameterData } from '../models/ParameterData';\nimport { ParameterDetail } from '../models/ParameterDetail';\nimport { PatchSystemModel } from '../models/PatchSystemModel';\nimport { PremiumFeatureResponseModel } from '../models/PremiumFeatureResponseModel';\nimport { Product } from '../models/Product';\nimport { ProductRegistrationAddress } from '../models/ProductRegistrationAddress';\nimport { ProductRegistrationResponse } from '../models/ProductRegistrationResponse';\nimport { ProductRegistrationResponseWithAddress } from '../models/ProductRegistrationResponseWithAddress';\nimport { ProductResponseModel } from '../models/ProductResponseModel';\nimport { Properties } from '../models/Properties';\nimport { Reported } from '../models/Reported';\nimport { ReportedFirmware } from '../models/ReportedFirmware';\nimport { SearchGroupSSG } from '../models/SearchGroupSSG';\nimport { SmartHomeModeModel } from '../models/SmartHomeModeModel';\nimport { SpotPriceDeliveryModel } from '../models/SpotPriceDeliveryModel';\nimport { SsqGroupDevice } from '../models/SsqGroupDevice';\nimport { StoreSet } from '../models/StoreSet';\nimport { StoreSetEntry } from '../models/StoreSetEntry';\nimport { SystemDevice } from '../models/SystemDevice';\nimport { SystemWithDevices } from '../models/SystemWithDevices';\nimport { UpdateGroupRequest } from '../models/UpdateGroupRequest';\nimport { UserWithAddress } from '../models/UserWithAddress';\nimport { V2DevicesDeviceIdSmartHomeCategoriesGet200Response } from '../models/V2DevicesDeviceIdSmartHomeCategoriesGet200Response';\nimport { VoucherManyRequest } from '../models/VoucherManyRequest';\nimport { VoucherSingleRequest } from '../models/VoucherSingleRequest';\nimport { ZonePatchRequest } from '../models/ZonePatchRequest';\nimport { ZoneResponse } from '../models/ZoneResponse';\n\n/* tslint:disable:no-unused-variable */\nconst primitives = ['string', 'boolean', 'double', 'integer', 'long', 'float', 'number', 'any'];\n\nconst supportedMediaTypes: { [mediaType: string]: number } = {\n    'application/json': Infinity,\n    'application/json-patch+json': 1,\n    'application/merge-patch+json': 1,\n    'application/strategic-merge-patch+json': 1,\n    'application/octet-stream': 0,\n    'application/x-www-form-urlencoded': 0,\n};\n\nconst enumsMap: Set<string> = new Set<string>([\n    'AggregationMethod',\n    'AggregationUnit',\n    'AidMode',\n    'AlarmSeverity',\n    'DeviceConnectionState',\n    'PremiumFeatures',\n    'SecurityLevel',\n    'SmartMode',\n    'Status',\n    'VoucherType',\n]);\n\nconst typeMap: { [index: string]: any } = {\n    Address: Address,\n    AddressResponseModel: AddressResponseModel,\n    AidModeResponseModel: AidModeResponseModel,\n    Alarm: Alarm,\n    AlarmStatus: AlarmStatus,\n    AlarmsPaged: AlarmsPaged,\n    AvailableMethods: AvailableMethods,\n    CloudToDeviceMethodResult: CloudToDeviceMethodResult,\n    Country: Country,\n    Curve: Curve,\n    DataPoint: DataPoint,\n    DeviceCategoriesModel: DeviceCategoriesModel,\n    DeviceCategory: DeviceCategory,\n    DeviceCategoryModel: DeviceCategoryModel,\n    DeviceFirmwareInfoResponse: DeviceFirmwareInfoResponse,\n    DeviceInfoResponseModel: DeviceInfoResponseModel,\n    DeviceInfoResponseModelPagedResult: DeviceInfoResponseModelPagedResult,\n    DeviceInfoSyncResponseModel: DeviceInfoSyncResponseModel,\n    DeviceParameterData: DeviceParameterData,\n    DevicePremiumResponse: DevicePremiumResponse,\n    DeviceResponseModel: DeviceResponseModel,\n    EnumValues: EnumValues,\n    FirmwareResponseModel: FirmwareResponseModel,\n    GroupedDeviceParameterData: GroupedDeviceParameterData,\n    LimitedUserProfile: LimitedUserProfile,\n    PagedSystemResult: PagedSystemResult,\n    ParameterData: ParameterData,\n    ParameterDetail: ParameterDetail,\n    PatchSystemModel: PatchSystemModel,\n    PremiumFeatureResponseModel: PremiumFeatureResponseModel,\n    Product: Product,\n    ProductRegistrationAddress: ProductRegistrationAddress,\n    ProductRegistrationResponse: ProductRegistrationResponse,\n    ProductRegistrationResponseWithAddress: ProductRegistrationResponseWithAddress,\n    ProductResponseModel: ProductResponseModel,\n    Properties: Properties,\n    Reported: Reported,\n    ReportedFirmware: ReportedFirmware,\n    SearchGroupSSG: SearchGroupSSG,\n    SmartHomeModeModel: SmartHomeModeModel,\n    SpotPriceDeliveryModel: SpotPriceDeliveryModel,\n    SsqGroupDevice: SsqGroupDevice,\n    StoreSet: StoreSet,\n    StoreSetEntry: StoreSetEntry,\n    SystemDevice: SystemDevice,\n    SystemWithDevices: SystemWithDevices,\n    UpdateGroupRequest: UpdateGroupRequest,\n    UserWithAddress: UserWithAddress,\n    V2DevicesDeviceIdSmartHomeCategoriesGet200Response: V2DevicesDeviceIdSmartHomeCategoriesGet200Response,\n    VoucherManyRequest: VoucherManyRequest,\n    VoucherSingleRequest: VoucherSingleRequest,\n    ZonePatchRequest: ZonePatchRequest,\n    ZoneResponse: ZoneResponse,\n};\n\nexport class ObjectSerializer {\n    public static findCorrectType(data: any, expectedType: string): string {\n        if (data == undefined) {\n            return expectedType;\n        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {\n            return expectedType;\n        } else if (expectedType === 'Date') {\n            return expectedType;\n        } else {\n            if (enumsMap.has(expectedType)) {\n                return expectedType;\n            }\n\n            if (!typeMap[expectedType]) {\n                return expectedType; // w/e we don't know the type\n            }\n\n            // Check the discriminator\n            const discriminatorProperty = typeMap[expectedType].discriminator;\n            if (discriminatorProperty == null) {\n                return expectedType; // the type does not have a discriminator. use it.\n            } else {\n                if (data[discriminatorProperty]) {\n                    const discriminatorType = data[discriminatorProperty];\n                    if (typeMap[discriminatorType]) {\n                        return discriminatorType; // use the type given in the discriminator\n                    } else {\n                        return expectedType; // discriminator did not map to a type\n                    }\n                } else {\n                    return expectedType; // discriminator was not present (or an empty string)\n                }\n            }\n        }\n    }\n\n    public static serialize(data: any, type: string, format: string): any {\n        if (data == undefined) {\n            return data;\n        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {\n            return data;\n        } else if (type.lastIndexOf('Array<', 0) === 0) {\n            // string.startsWith pre es6\n            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>\n            subType = subType.substring(0, subType.length - 1); // Type> => Type\n            const transformedData: any[] = [];\n            for (const date of data) {\n                transformedData.push(ObjectSerializer.serialize(date, subType, format));\n            }\n            return transformedData;\n        } else if (type === 'Date') {\n            if (format == 'date') {\n                let month = data.getMonth() + 1;\n                month = month < 10 ? '0' + month.toString() : month.toString();\n                let day = data.getDate();\n                day = day < 10 ? '0' + day.toString() : day.toString();\n\n                return data.getFullYear() + '-' + month + '-' + day;\n            } else {\n                return data.toISOString();\n            }\n        } else {\n            if (enumsMap.has(type)) {\n                return data;\n            }\n            if (!typeMap[type]) {\n                // in case we dont know the type\n                return data;\n            }\n\n            // Get the actual type of this object\n            type = this.findCorrectType(data, type);\n\n            // get the map for the correct type.\n            const attributeTypes = typeMap[type].getAttributeTypeMap();\n            const instance: { [index: string]: any } = {};\n            for (const attributeType of attributeTypes) {\n                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);\n            }\n            return instance;\n        }\n    }\n\n    public static deserialize(data: any, type: string, format: string): any {\n        // polymorphism may change the actual type.\n        type = ObjectSerializer.findCorrectType(data, type);\n        if (data == undefined) {\n            return data;\n        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {\n            return data;\n        } else if (type.lastIndexOf('Array<', 0) === 0) {\n            // string.startsWith pre es6\n            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>\n            subType = subType.substring(0, subType.length - 1); // Type> => Type\n            const transformedData: any[] = [];\n            for (const date of data) {\n                transformedData.push(ObjectSerializer.deserialize(date, subType, format));\n            }\n            return transformedData;\n        } else if (type === 'Date') {\n            return new Date(data);\n        } else {\n            if (enumsMap.has(type)) {\n                // is Enum\n                return data;\n            }\n\n            if (!typeMap[type]) {\n                // dont know the type\n                return data;\n            }\n            const instance = new typeMap[type]();\n            const attributeTypes = typeMap[type].getAttributeTypeMap();\n            for (const attributeType of attributeTypes) {\n                const value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);\n                if (value !== undefined) {\n                    instance[attributeType.name] = value;\n                }\n            }\n            return instance;\n        }\n    }\n\n    /**\n     * Normalize media type\n     *\n     * We currently do not handle any media types attributes, i.e. anything\n     * after a semicolon. All content is assumed to be UTF-8 compatible.\n     */\n    public static normalizeMediaType(mediaType: string | undefined): string | undefined {\n        if (mediaType === undefined) {\n            return undefined;\n        }\n        return mediaType.split(';')[0].trim().toLowerCase();\n    }\n\n    /**\n     * From a list of possible media types, choose the one we can handle best.\n     *\n     * The order of the given media types does not have any impact on the choice\n     * made.\n     */\n    public static getPreferredMediaType(mediaTypes: Array<string>): string {\n        /** According to OAS 3 we should default to json */\n        if (mediaTypes.length === 0) {\n            return 'application/json';\n        }\n\n        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);\n        let selectedMediaType: string | undefined = undefined;\n        let selectedRank: number = -Infinity;\n        for (const mediaType of normalMediaTypes) {\n            if (supportedMediaTypes[mediaType!] > selectedRank) {\n                selectedMediaType = mediaType;\n                selectedRank = supportedMediaTypes[mediaType!];\n            }\n        }\n\n        if (selectedMediaType === undefined) {\n            throw new Error('None of the given media types are supported: ' + mediaTypes.join(', '));\n        }\n\n        return selectedMediaType!;\n    }\n\n    /**\n     * Convert data to a string according the given media type\n     */\n    public static stringify(data: any, mediaType: string): string {\n        if (mediaType === 'text/plain') {\n            return String(data);\n        }\n\n        if (mediaType === 'application/json' || mediaType === 'application/json-patch+json' || mediaType === 'application/merge-patch+json' || mediaType === 'application/strategic-merge-patch+json') {\n            return JSON.stringify(data);\n        }\n\n        throw new Error('The mediaType ' + mediaType + ' is not supported by ObjectSerializer.stringify.');\n    }\n\n    /**\n     * Parse data from a string according to the given media type\n     */\n    public static parse(rawData: string, mediaType: string | undefined): string {\n        if (mediaType === undefined) {\n            throw new Error('Cannot parse content. No Content-Type defined.');\n        }\n\n        if (mediaType === 'text/plain') {\n            return rawData;\n        }\n\n        if (mediaType === 'application/json' || mediaType === 'application/json-patch+json' || mediaType === 'application/merge-patch+json' || mediaType === 'application/strategic-merge-patch+json') {\n            return JSON.parse(rawData);\n        }\n\n        if (mediaType === 'text/html') {\n            return rawData;\n        }\n\n        throw new Error('The mediaType ' + mediaType + ' is not supported by ObjectSerializer.parse.');\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
