{
  "version": 3,
  "sources": ["../../src/models/ZoneResponse.ts"],
  "sourcesContent": ["/**\n * myUplink Public API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: v2\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport class ZoneResponse {\n    /**\n     * sh-zone\\'s parameter id.\n     */\n    'zoneId'?: string | null;\n    /**\n     * sh-zone\\'s parameter name.\n     */\n    'name'?: string | null;\n    /**\n     * If true, zone is command-only and no temperature readings  are available. Setpoint will be an unspecified value  (not degrees).\n     */\n    'commandOnly'?: boolean;\n    /**\n     * sh-zone\\'s supported modes.\n     */\n    'supportedModes'?: string | null;\n    /**\n     * Sh-zone\\'s current mode.\n     */\n    'mode'?: string | null;\n    /**\n     * Current temperature in target unit.\n     */\n    'temperature'?: number | null;\n    /**\n     * Target temperature in target unit.\n     */\n    'setpoint'?: number | null;\n    /**\n     * Heating setpoint current value.\n     */\n    'setpointHeat'?: number | null;\n    /**\n     * Cooling setpoint current value.\n     */\n    'setpointCool'?: number | null;\n    /**\n     * Minimum temperature range.\n     */\n    'setpointRangeMin'?: number | null;\n    /**\n     * Maximum temperature range.\n     */\n    'setpointRangeMax'?: number | null;\n    /**\n     * Specified temperature unit in haystack.  If \\\"isCelsius\\\" is false then all temperatures are in Fahrenheit. Otherwies it is in Celsius.\n     */\n    'isCelsius'?: boolean;\n    /**\n     * Indoor CO2 levels (0-40000ppm)\n     */\n    'indoorCo2'?: number | null;\n    /**\n     * Indoor humidity (0-100%RH)\n     */\n    'indoorHumidity'?: number | null;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{ name: string; baseName: string; type: string; format: string }> = [\n        {\n            name: 'zoneId',\n            baseName: 'zoneId',\n            type: 'string',\n            format: '',\n        },\n        {\n            name: 'name',\n            baseName: 'name',\n            type: 'string',\n            format: '',\n        },\n        {\n            name: 'commandOnly',\n            baseName: 'commandOnly',\n            type: 'boolean',\n            format: '',\n        },\n        {\n            name: 'supportedModes',\n            baseName: 'supportedModes',\n            type: 'string',\n            format: '',\n        },\n        {\n            name: 'mode',\n            baseName: 'mode',\n            type: 'string',\n            format: '',\n        },\n        {\n            name: 'temperature',\n            baseName: 'temperature',\n            type: 'number',\n            format: 'double',\n        },\n        {\n            name: 'setpoint',\n            baseName: 'setpoint',\n            type: 'number',\n            format: 'double',\n        },\n        {\n            name: 'setpointHeat',\n            baseName: 'setpointHeat',\n            type: 'number',\n            format: 'double',\n        },\n        {\n            name: 'setpointCool',\n            baseName: 'setpointCool',\n            type: 'number',\n            format: 'double',\n        },\n        {\n            name: 'setpointRangeMin',\n            baseName: 'setpointRangeMin',\n            type: 'number',\n            format: 'int32',\n        },\n        {\n            name: 'setpointRangeMax',\n            baseName: 'setpointRangeMax',\n            type: 'number',\n            format: 'int32',\n        },\n        {\n            name: 'isCelsius',\n            baseName: 'isCelsius',\n            type: 'boolean',\n            format: '',\n        },\n        {\n            name: 'indoorCo2',\n            baseName: 'indoorCo2',\n            type: 'number',\n            format: 'int32',\n        },\n        {\n            name: 'indoorHumidity',\n            baseName: 'indoorHumidity',\n            type: 'number',\n            format: 'double',\n        },\n    ];\n\n    static getAttributeTypeMap() {\n        return ZoneResponse.attributeTypeMap;\n    }\n\n    public constructor() {}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,MAAM,gBAAN,MAAM,cAAa;AAAA,EAmJtB,OAAO,sBAAsB;AACzB,WAAO,cAAa;AAAA,EACxB;AAAA,EAEO,cAAc;AAAA,EAAC;AAC1B;AAxJa,cA0DO,gBAAoC;AA1D3C,cA4DO,mBAA4F;AAAA,EACxjJG,IAAM,eAAN;",
  "names": []
}
