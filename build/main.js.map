{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { MyUplinkLogic } from './myUplinkLogic';\n\n// Helper functions:\n\n// For todays date;\ndeclare global {\n    interface Date {\n        today(): string;\n    }\n}\nDate.prototype.today = function (): string {\n    return `${this.getFullYear()}-${this.getMonth() + 1 < 10 ? '0' : ''}${this.getMonth() + 1}-${\n        this.getDate() < 10 ? '0' : ''\n    }${this.getDate()}`;\n};\n\n// For the time now\ndeclare global {\n    interface Date {\n        timeNow(): string;\n    }\n}\nDate.prototype.timeNow = function (): string {\n    return `${(this.getHours() < 10 ? '0' : '') + this.getHours()}:${\n        this.getMinutes() < 10 ? '0' : ''\n    }${this.getMinutes()}:${this.getSeconds() < 10 ? '0' : ''}${this.getSeconds()}`;\n};\n\nclass Myuplink extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'myuplink',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.refreshInterval = 0;\n    }\n\n    private myUplink: MyUplinkLogic | undefined;\n    private timeout: ioBroker.Timeout | undefined;\n    private refreshInterval: number;\n\n    async CreateSystemAsync(path: string, name: string): Promise<void> {\n        this.log.debug(`Create Device object if not exists: ${path}`);\n        await this.setObjectNotExistsAsync(path, {\n            type: 'device',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    async CreateDeviceAsync(path: string, name: string): Promise<void> {\n        this.log.debug(`Create Channel object if not exists: ${path}`);\n        await this.setObjectNotExistsAsync(path, {\n            type: 'channel',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    async CreateCategoryAsync(path: string, name: string): Promise<void> {\n        this.log.debug(`Create Folder object if not exists: ${path}`);\n        await this.setObjectNotExistsAsync(path, {\n            type: 'folder',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    async CreateStringObjectAsync(\n        path: string,\n        name: string,\n        value: string,\n        createObject: boolean,\n        role: string = 'text',\n    ): Promise<void> {\n        if (createObject) {\n            this.log.debug(`Create string object if not exists: ${path}`);\n            await this.setObjectNotExistsAsync(path, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'string',\n                    role: role,\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        }\n        await this.setState(path, { val: value, ack: true });\n    }\n\n    async CreateBooleanObjectAsync(\n        path: string,\n        name: string,\n        role: string,\n        value: boolean,\n        createObject: boolean,\n    ): Promise<void> {\n        if (createObject) {\n            this.log.debug(`Create boolean object if not exists: ${path}`);\n            await this.setObjectNotExistsAsync(path, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'boolean',\n                    role: role,\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        }\n        await this.setState(path, { val: value, ack: true });\n    }\n\n    async CreateWritableStringObjectAsync(path: string, name: string, role: string, deviceId: string): Promise<void> {\n        this.log.debug(`Create or update writeable string object: ${path}`);\n        await this.extendObject(path, {\n            type: 'state',\n            common: {\n                name: name,\n                type: 'string',\n                role: role,\n                read: true,\n                write: true,\n            },\n            native: {\n                rawJson: true,\n                writable: true,\n                deviceId: deviceId,\n            },\n        });\n    }\n\n    async CreateOrUpdateParameterObjectAsync(\n        path: string,\n        name: string,\n        deviceId: string | null | undefined,\n        parameterId: string | null | undefined,\n        role: string,\n        writable: boolean,\n        unit: string | undefined,\n        min: number | undefined,\n        max: number | undefined,\n        step: number | undefined,\n        states: Record<string, string> | undefined,\n    ): Promise<void> {\n        const readObject = await this.getObjectAsync(path);\n        if (readObject == null) {\n            const newObject: ioBroker.SettableObject = {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'number',\n                    role: role,\n                    read: true,\n                    write: writable,\n                    unit: unit,\n                    min: min,\n                    max: max,\n                    step: step,\n                    states: states,\n                },\n                native: {\n                    parameterId: parameterId,\n                    writable: writable,\n                    deviceId: deviceId,\n                },\n            };\n            this.log.debug(`Create new parameter object: ${path}`);\n            await this.setObjectAsync(path, newObject);\n        } else {\n            let changed = false;\n            if (readObject.common == null) {\n                readObject.common = {\n                    name: name,\n                    type: 'number',\n                    role: role,\n                    read: true,\n                    write: writable,\n                    unit: unit,\n                    min: min,\n                    max: max,\n                    step: step,\n                    states: states,\n                };\n                changed = true;\n            } else {\n                if (readObject.common.name != name) {\n                    readObject.common.name = name;\n                    changed = true;\n                }\n                if (readObject.common.type != 'number') {\n                    readObject.common.type = 'number';\n                    changed = true;\n                }\n                if (readObject.common.role != role) {\n                    readObject.common.role = role;\n                    changed = true;\n                }\n                if (readObject.common.read != true) {\n                    readObject.common.read = true;\n                    changed = true;\n                }\n                if (readObject.common.write != writable) {\n                    readObject.common.write = writable;\n                    changed = true;\n                }\n                if (readObject.common.unit != unit) {\n                    readObject.common.unit = unit;\n                    changed = true;\n                }\n                if (readObject.common.min != min) {\n                    readObject.common.min = min;\n                    changed = true;\n                }\n                if (readObject.common.max != max) {\n                    readObject.common.max = max;\n                    changed = true;\n                }\n                if (readObject.common.step != step) {\n                    readObject.common.step = step;\n                    changed = true;\n                }\n                if (!this.areRecordsEqual(readObject.common.states, states)) {\n                    readObject.common.states = states;\n                    changed = true;\n                }\n            }\n            if (readObject.native == null) {\n                readObject.native = {\n                    parameterId: parameterId,\n                    writable: writable,\n                    deviceId: deviceId,\n                };\n                changed = true;\n            } else {\n                if (readObject.native.parameterId != parameterId) {\n                    readObject.native.parameterId = parameterId;\n                    changed = true;\n                }\n                if (readObject.native.writable != writable) {\n                    readObject.native.writable = writable;\n                    changed = true;\n                }\n                if (readObject.native.deviceId != deviceId) {\n                    readObject.native.deviceId = deviceId;\n                    changed = true;\n                }\n            }\n\n            if (changed) {\n                this.log.debug(`Update parameter object: ${path}`);\n                await this.setObjectAsync(path, readObject);\n            }\n        }\n    }\n\n    async SetStateAsync(path: string, value: string | number | boolean | null): Promise<void> {\n        await this.setState(path, { val: value, ack: true });\n    }\n\n    private areRecordsEqual(\n        record1: Record<string, string> | null | undefined,\n        record2: Record<string, string> | null | undefined,\n    ): boolean {\n        if (record1 == null && record2 == null) {\n            return true;\n        }\n        if (record1 == null || record2 == null) {\n            return false;\n        }\n\n        const keys1 = Object.keys(record1);\n        const keys2 = Object.keys(record2);\n\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (const key of keys1) {\n            if (record1[key] !== record2[key]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        this.log.info('Starting adapter.');\n\n        await this.setInfoObjects();\n\n        this.refreshInterval = this.config.Interval * 60;\n        if (this.refreshInterval < 60) {\n            this.refreshInterval = 60;\n        }\n\n        const dataDir = utils.getAbsoluteDefaultDataDir();\n        const storeDir = path.join(dataDir, `myuplink_${this.instance}`);\n        try {\n            // create directory\n            if (!fs.existsSync(storeDir)) {\n                fs.mkdirSync(storeDir);\n            }\n        } catch (err) {\n            this.log.error(`Could not create storage directory (${storeDir}): ${err as any}`);\n            return;\n        }\n\n        try {\n            this.myUplink = new MyUplinkLogic(this, this.config, storeDir, this.log);\n        } catch (error) {\n            await this.setState('info.connection', { val: false, ack: true });\n            await this.setState('info.currentError', { val: `${error as any}`, ack: true });\n            return;\n        }\n\n        await this.subscribeStatesAsync('*');\n\n        this.log.info('Adapter started.');\n\n        await this.getDataAsync();\n    }\n\n    private async getDataAsync(): Promise<void> {\n        if (this.myUplink) {\n            const error = await this.myUplink.GetDataAsync();\n            const newDate = new Date();\n            const datetime = `${newDate.today()} ${newDate.timeNow()}`;\n            if (error) {\n                await this.setState('info.connection', { val: false, ack: true });\n                await this.setState('info.lastErrorTime', { val: datetime, ack: true });\n                await this.setState('info.lastError', { val: error, ack: true });\n                await this.setState('info.currentError', { val: error, ack: true });\n            } else {\n                await this.setState('info.connection', { val: true, expire: this.refreshInterval + 30, ack: true });\n                await this.setState('info.updateTime', { val: datetime, ack: true });\n                await this.setState('info.currentError', { val: '', ack: true });\n            }\n        }\n\n        this.log.debug('Set timer');\n        this.timeout = this.setTimeout(async () => {\n            await this.getDataAsync();\n        }, this.refreshInterval * 1000);\n    }\n\n    private async setInfoObjects(): Promise<void> {\n        await this.setObjectNotExistsAsync('info', {\n            type: 'channel',\n            common: {\n                name: 'Information',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.connection', {\n            type: 'state',\n            common: {\n                name: 'Connected to myUplink',\n                role: 'indicator.connected',\n                type: 'boolean',\n                read: true,\n                write: false,\n                def: false,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.currentError', {\n            type: 'state',\n            common: {\n                name: 'Current Error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.updateTime', {\n            type: 'state',\n            common: {\n                name: 'Time of the last update',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.lastError', {\n            type: 'state',\n            common: {\n                name: 'Last Error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.lastErrorTime', {\n            type: 'state',\n            common: {\n                name: 'Time of the last error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id - The id of the state that has changed\n     * @param state - The state that has changed\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (\n            state != null &&\n            state.ack === false &&\n            state.q == this.constants.STATE_QUALITY.GOOD &&\n            state.val != null &&\n            this.myUplink != null\n        ) {\n            this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n            const obj = await this.getObjectAsync(id);\n            if (obj != null && obj.native != null && obj.native.writable == true && obj.native.deviceId) {\n                const deviceId: string = obj.native.deviceId;\n                const parameterId: string | null = obj.native.parameterId?.toString();\n                const error = await this.myUplink.SetDataAsync(\n                    id,\n                    state.val,\n                    deviceId,\n                    parameterId,\n                    obj.native.rawJson === true,\n                );\n                if (error) {\n                    await this.setState(id, {\n                        val: state.val,\n                        q: this.constants.STATE_QUALITY.DEVICE_ERROR_REPORT,\n                        ack: false,\n                        c: error,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback - The callback function to be called when the unload process is complete\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.clearTimeout(this.timeout);\n            this.timeout = undefined;\n            this.myUplink = undefined;\n            await this.setState('info.connection', { val: false, ack: true });\n            this.log.info('Cleaned everything up...');\n            callback();\n        } catch {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Myuplink(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Myuplink())();\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
