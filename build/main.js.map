{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { AuthRepository } from './authRepository';\nimport { Alarm } from './models/Alarm';\nimport { EnumValues } from './models/EnumValues';\nimport { ParameterData } from './models/ParameterData';\nimport { SystemDevice } from './models/SystemDevice';\nimport { SystemWithDevices } from './models/SystemWithDevices';\nimport { MyUplinkRepository } from './myuplinkRepository';\n\n// Helper functions:\n\n// For todays date;\ndeclare global {\n    interface Date {\n        today(): string;\n    }\n}\nDate.prototype.today = function (): string {\n    return this.getFullYear() + '-' + (this.getMonth() + 1 < 10 ? '0' : '') + (this.getMonth() + 1) + '-' + (this.getDate() < 10 ? '0' : '') + this.getDate();\n};\n\n// For the time now\ndeclare global {\n    interface Date {\n        timeNow(): string;\n    }\n}\nDate.prototype.timeNow = function (): string {\n    return (this.getHours() < 10 ? '0' : '') + this.getHours() + ':' + (this.getMinutes() < 10 ? '0' : '') + this.getMinutes() + ':' + (this.getSeconds() < 10 ? '0' : '') + this.getSeconds();\n};\n\nclass Myuplink extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'myuplink',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.refreshInterval = 0;\n    }\n\n    private authRepository: AuthRepository | undefined;\n    private myUplinkRepository: MyUplinkRepository | undefined;\n    private timeout: ioBroker.Timeout | undefined;\n    private refreshInterval: number;\n    private systemIds: Map<string, string> = new Map<string, string>();\n    private deviceIds: Map<string, string> = new Map<string, string>();\n    private categories: Map<string, string> = new Map<string, string>();\n    private parameterIds: Map<string, string> = new Map<string, string>();\n    private parameterIdToCategory: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        this.log.info('Starting adapter.');\n\n        await this.setInfoObjects();\n\n        this.config.RenameSystemIds?.forEach((renameData: ioBroker.RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                this.log.debug(`Map System ID: ${renameData.OriginalId} -> ${renameData.NewId}`);\n                this.systemIds.set(renameData.OriginalId, this.replaceForbiddenCharacters(renameData.NewId));\n            }\n        });\n        this.config.RenameDeviceIds?.forEach((renameData: ioBroker.RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                this.log.debug(`Map Device ID: ${renameData.OriginalId} -> ${renameData.NewId}`);\n                this.deviceIds.set(renameData.OriginalId, this.replaceForbiddenCharacters(renameData.NewId));\n            }\n        });\n        this.config.RenameCategories?.forEach((renameData: ioBroker.RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                this.log.debug(`Map Category: ${renameData.OriginalId} -> ${renameData.NewId}`);\n                this.categories.set(renameData.OriginalId, this.replaceForbiddenCharacters(renameData.NewId));\n            }\n        });\n        this.config.RenameDataIds?.forEach((renameData: ioBroker.RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                this.log.debug(`Map Data ID: ${renameData.OriginalId} -> ${renameData.NewId}`);\n                this.parameterIds.set(renameData.OriginalId, renameData.NewId);\n                if (renameData.Category) {\n                    this.parameterIdToCategory.set(renameData.OriginalId, this.replaceForbiddenCharacters(renameData.Category));\n                }\n            }\n        });\n\n        this.refreshInterval = this.config.Interval * 60;\n        if (this.refreshInterval < 60) {\n            this.refreshInterval = 60;\n        }\n\n        const identifier: string = this.config.Identifier.trim();\n        const secret: string = this.config.Secret.trim();\n        const callbackURL: string = this.config.CallbackURL.trim();\n        const configured: boolean = this.config.Configured;\n\n        let error = false;\n        if (identifier == '' || identifier == null) {\n            if (configured != false) {\n                this.log.error('Missing Identifier in the settings!');\n            }\n            error = true;\n        }\n        if (secret == '' || secret == null) {\n            if (configured != false) {\n                this.log.error('Missing Secret in the settings!');\n            }\n            error = true;\n        }\n        if (callbackURL == '' || callbackURL == null) {\n            if (configured != false) {\n                this.log.error('Missing Callback URL in the settings!');\n            }\n            error = true;\n        }\n        if (error) {\n            this.setState('info.connection', { val: false, ack: true });\n            this.setState('info.currentError', { val: 'Missing settings!', ack: true });\n            return;\n        }\n\n        const dataDir: string = utils.getAbsoluteDefaultDataDir();\n        let storeDir: string = path.join(dataDir, 'myuplink');\n        try {\n            // create directory\n            if (!fs.existsSync(storeDir)) {\n                fs.mkdirSync(storeDir);\n            }\n        } catch (err) {\n            this.log.error('Could not create storage directory (' + storeDir + '): ' + err);\n            storeDir = __dirname;\n        }\n        const storeFile = path.join(storeDir, 'session.' + this.instance + '.json');\n\n        this.authRepository = new AuthRepository(\n            {\n                clientId: identifier,\n                clientSecret: secret,\n                useAuthorizationCodeGrant: this.config.UseAuthorizationCodeGrant,\n                redirectUri: callbackURL,\n                authCode: this.config.AuthCode.trim(),\n                sessionStoreFilePath: storeFile,\n                baseUrl: 'https://api.myuplink.com',\n                scope: 'READSYSTEM WRITESYSTEM',\n                timeout: 45000,\n                userAgent: 'iobroker.myuplink',\n                renewBeforeExpiry: 5 * 60 * 1000,\n            },\n            this.log,\n        );\n\n        this.myUplinkRepository = new MyUplinkRepository(\n            {\n                baseUrl: 'https://api.myuplink.com',\n                timeout: 45000,\n                userAgent: 'iobroker.myuplink',\n                language: this.config.Language,\n            },\n            this.log,\n        );\n\n        await this.subscribeStatesAsync('*');\n\n        this.log.info('Adapter started.');\n\n        this.getData();\n    }\n\n    private async getData(): Promise<void> {\n        try {\n            if (this.authRepository) {\n                const accessToken = await this.authRepository.getAccessToken();\n                if (accessToken && this.myUplinkRepository) {\n                    const systems = await this.myUplinkRepository.getSystemsAndDevicesAsync(accessToken);\n                    this.setState('info.connection', { val: true, expire: this.refreshInterval + 30, ack: true });\n                    const newDate = new Date();\n                    const datetime = newDate.today() + ' ' + newDate.timeNow();\n                    this.setState('info.updateTime', { val: datetime, ack: true });\n                    this.setState('info.currentError', { val: '', ack: true });\n\n                    systems.systems?.forEach(async (value: SystemWithDevices) => {\n                        await this.setSystemWithDevices(value, accessToken);\n                    });\n                }\n            }\n        } catch (error) {\n            this.log.error('' + error);\n\n            this.setState('info.connection', { val: false, ack: true });\n\n            const newDate = new Date();\n            const datetime = newDate.today() + ' ' + newDate.timeNow();\n            this.setState('info.lastErrorTime', { val: datetime, ack: true });\n            this.setState('info.lastError', { val: '' + error, ack: true });\n            this.setState('info.currentError', { val: '' + error, ack: true });\n        }\n\n        this.timeout = this.setTimeout(\n            async () => {\n                await this.getData();\n            },\n            <number>this.refreshInterval * 1000,\n        );\n    }\n\n    private async setSystemWithDevices(system: SystemWithDevices, accessToken: string): Promise<void> {\n        if (system.systemId != undefined && system.name != undefined) {\n            const systemId = this.replaceForbiddenCharacters(system.systemId);\n            const newSystemId = this.systemIds.get(systemId);\n            const systemPath = newSystemId ?? systemId;\n            const systemName = this.removeSoftHyphen(system.name);\n            await this.myCreateDeviceAsync(systemPath, systemName);\n            await this.myCreateStringStateAsync(`${systemPath}.systemId`, 'System ID', system.systemId);\n            await this.myCreateStringStateAsync(`${systemPath}.name`, 'Name', systemName, 'info.name');\n            if (system.country != undefined) {\n                await this.myCreateStringStateAsync(`${systemPath}.country`, 'Country', system.country);\n            }\n            if (system.securityLevel != undefined) {\n                await this.myCreateStringStateAsync(`${systemPath}.securityLevel`, 'Security Level', system.securityLevel);\n            }\n            if (system.hasAlarm != undefined) {\n                await this.myCreateBooleanStateAsync(`${systemPath}.hasAlarm`, 'Has Alarm', 'indicator.alarm', system.hasAlarm);\n            }\n            system.devices?.forEach(async (dev: SystemDevice) => {\n                await this.setSystemDevice(dev, systemPath, accessToken);\n            });\n\n            if (this.config.AddActiveNotifications) {\n                const notifications = await this.myUplinkRepository?.getActiveNotificationsAsync(system.systemId, accessToken);\n                if (this.config.AddRawActiveNotifications) {\n                    await this.myCreateStringStateAsync(`${systemPath}.rawActiveNotifications`, 'Received raw JSON of active notifications', JSON.stringify(notifications?.notifications, null, ''));\n                }\n                let notificationsDescriptions: string = '';\n                notifications?.notifications?.forEach((notification: Alarm) => {\n                    notificationsDescriptions += `${notification.header}: ${notification.description}\\n`;\n                });\n                await this.myCreateStringStateAsync(`${systemPath}.activeNotifications`, 'Active notification descriptions', notificationsDescriptions);\n            }\n        }\n    }\n\n    private async setSystemDevice(device: SystemDevice, systemPath: string, accessToken: string): Promise<void> {\n        if (device.id != undefined && device.product?.name != undefined) {\n            const deviceId = this.replaceForbiddenCharacters(device.id);\n            const newDeviceId = this.deviceIds.get(deviceId);\n            const deviceSubPath = newDeviceId ?? deviceId;\n            const devicePath = `${systemPath}.${deviceSubPath}`;\n            const deviceName = this.removeSoftHyphen(device.product.name);\n            await this.myCreateChannelAsync(devicePath, deviceName);\n            await this.myCreateStringStateAsync(`${devicePath}.deviceId`, 'Device ID', device.id);\n            await this.myCreateStringStateAsync(`${devicePath}.name`, 'Name', deviceName, 'info.name');\n            if (device.connectionState != undefined) {\n                await this.myCreateStringStateAsync(`${devicePath}.connectionState`, 'Connection State', device.connectionState, 'info.status');\n            }\n            if (device.currentFwVersion != undefined) {\n                await this.myCreateStringStateAsync(`${devicePath}.currentFwVersion`, 'Current Firmware Version', device.currentFwVersion, 'info.firmware');\n            }\n            if (device.product?.serialNumber != undefined) {\n                await this.myCreateStringStateAsync(`${devicePath}.serialNumber`, 'Serial Number', device.product.serialNumber, 'info.serial');\n            }\n\n            if (this.config.AddData) {\n                const devicePoints = await this.myUplinkRepository?.getDevicePointsAsync(device.id, accessToken);\n                if (this.config.AddRawData) {\n                    await this.myCreateStringStateAsync(`${devicePath}.rawData`, 'Received raw JSON of parameter data', JSON.stringify(devicePoints, null, ''));\n                }\n                devicePoints?.forEach(async (data: ParameterData) => {\n                    await this.setParameterData(data, devicePath, device.id);\n                });\n            }\n        }\n    }\n\n    private async setParameterData(data: ParameterData, devicePath: string, deviceId: string | null | undefined): Promise<void> {\n        if (data.parameterId && data.parameterName) {\n            const parameterId = this.replaceForbiddenCharacters(data.parameterId);\n            const newParameterId = this.parameterIds.get(parameterId);\n            const parameterSubPath = newParameterId ?? parameterId;\n            let path = `${devicePath}.${parameterSubPath}`;\n            const newCategory = this.parameterIdToCategory.get(parameterId);\n            if (newCategory) {\n                path = `${devicePath}.${newCategory}.${parameterSubPath}`;\n            } else if (data.category) {\n                const categoryId = this.replaceForbiddenCharacters(data.category);\n                const newCategoryId = this.categories.get(categoryId);\n                const categorySubPath = newCategoryId ?? categoryId;\n                const catPath = `${devicePath}.${categorySubPath}`;\n                const pathWithCat = `${catPath}.${parameterSubPath}`;\n                if (this.config.GroupData) {\n                    await this.delObjectAsync(path);\n                    path = pathWithCat;\n                    await this.myCreateFolderAsync(catPath, data.category);\n                } else {\n                    await this.delObjectAsync(pathWithCat);\n                    await this.delObjectAsync(catPath);\n                }\n            }\n            const objectExists = await this.objectExists(path);\n            if (!objectExists) {\n                const obj: ioBroker.SettableObject = {\n                    type: 'state',\n                    common: {\n                        name: this.removeSoftHyphen(data.parameterName),\n                        type: 'number',\n                        role: 'value',\n                        read: true,\n                        write: data.writable ?? false,\n                    },\n                    native: {\n                        parameterId: data.parameterId,\n                        writable: data.writable,\n                        deviceId: deviceId,\n                    },\n                };\n                if (data.parameterUnit) {\n                    obj.common.unit = data.parameterUnit;\n                    switch (data.parameterUnit) {\n                        case 'kWh':\n                        case 'Ws':\n                            obj.common.role = 'value.energy';\n                            break;\n                        case 'W':\n                        case 'kW':\n                            obj.common.role = 'value.power';\n                            break;\n                        case '\u00B0C':\n                            obj.common.role = 'value.temperature';\n                            break;\n                        case 'Hz':\n                            obj.common.role = 'value.frequency';\n                            break;\n                        case 'A':\n                            obj.common.role = 'value.current';\n                            break;\n                        case 'V':\n                            obj.common.role = 'value.voltage';\n                            break;\n                        case '%RH':\n                            obj.common.role = 'value.humidity';\n                            obj.common.unit = '%';\n                            break;\n                        case 'bar':\n                            obj.common.role = 'value.pressure';\n                            break;\n                    }\n                }\n                if (data.minValue) {\n                    obj.common.min = data.minValue;\n                }\n                if (data.maxValue) {\n                    obj.common.max = data.maxValue;\n                }\n                if (data.stepValue) {\n                    obj.common.step = data.stepValue;\n                }\n                if (data.enumValues && data.enumValues.length > 0) {\n                    const states: Record<string, string> = {};\n                    data.enumValues.forEach((enumValue: EnumValues) => {\n                        if (enumValue.text && enumValue.value) {\n                            states[enumValue.value] = this.removeSoftHyphen(enumValue.text);\n                        }\n                    });\n                    obj.common.states = states;\n                }\n                await this.setObjectNotExistsAsync(path, obj);\n            }\n            await this.setStateAsync(path, { val: data.value, ack: true });\n        }\n    }\n\n    private async setInfoObjects(): Promise<void> {\n        await this.setObjectNotExistsAsync('info', {\n            type: 'channel',\n            common: {\n                name: 'Information',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.connection', {\n            type: 'state',\n            common: {\n                name: 'Connected to myUplink',\n                role: 'indicator.connected',\n                type: 'boolean',\n                read: true,\n                write: false,\n                def: false,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.currentError', {\n            type: 'state',\n            common: {\n                name: 'Current Error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.updateTime', {\n            type: 'state',\n            common: {\n                name: 'Time of the last update',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.lastError', {\n            type: 'state',\n            common: {\n                name: 'Last Error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.lastErrorTime', {\n            type: 'state',\n            common: {\n                name: 'Time of the last error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n    }\n\n    private async myCreateDeviceAsync(path: string, name: string): Promise<void> {\n        await this.setObjectNotExistsAsync(path, {\n            type: 'device',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    private async myCreateChannelAsync(path: string, name: string): Promise<void> {\n        await this.setObjectNotExistsAsync(path, {\n            type: 'channel',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    private async myCreateFolderAsync(path: string, name: string): Promise<void> {\n        await this.setObjectNotExistsAsync(path, {\n            type: 'folder',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    private async myCreateStringStateAsync(path: string, name: string, value: string, role: string = 'text'): Promise<void> {\n        await this.setObjectNotExistsAsync(path, {\n            type: 'state',\n            common: {\n                name: name,\n                type: 'string',\n                role: role,\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setStateAsync(path, { val: value, ack: true });\n    }\n\n    private async myCreateBooleanStateAsync(path: string, name: string, role: string, value: boolean): Promise<void> {\n        await this.setObjectNotExistsAsync(path, {\n            type: 'state',\n            common: {\n                name: name,\n                type: 'boolean',\n                role: role,\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setStateAsync(path, { val: value, ack: true });\n    }\n\n    private removeSoftHyphen(text: string): string {\n        return text.replace(new RegExp('\\u00AD', 'g'), '');\n    }\n\n    private replaceForbiddenCharacters(text: string): string {\n        return this.removeSoftHyphen(text).replace(new RegExp('\\\\.', 'g'), '_').replace(this.FORBIDDEN_CHARS, '_');\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state != null && state.ack === false && state.q == this.constants.STATE_QUALITY.GOOD && state.val != null && this.authRepository != null && this.myUplinkRepository != null) {\n            this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n            const obj = await this.getObjectAsync(id);\n            if (\n                obj != null &&\n                obj.native != null &&\n                obj.native.writable == true &&\n                obj.native.parameterId != null &&\n                obj.native.parameterId != '' &&\n                obj.native.deviceId != null &&\n                obj.native.deviceId != ''\n            ) {\n                try {\n                    const accessToken = await this.authRepository.getAccessToken();\n                    if (accessToken) {\n                        const deviceId = obj.native.deviceId;\n                        const parameterId = obj.native.parameterId.toString();\n                        const value = state.val.toString();\n                        await this.myUplinkRepository.setDevicePointsAsync(deviceId, accessToken, parameterId, value);\n\n                        const devicePoints = await this.myUplinkRepository.getDevicePointsAsync(deviceId, accessToken, parameterId);\n                        devicePoints?.forEach(async (data: ParameterData) => {\n                            if (data.parameterId == parameterId) {\n                                await this.setStateAsync(id, { val: data.value, ack: true });\n                            }\n                        });\n                    }\n                } catch (error) {\n                    const errorString = `${error}`;\n                    this.log.error(errorString);\n                    const quality = this.constants.STATE_QUALITY.DEVICE_ERROR_REPORT;\n                    await this.setStateAsync(id, { val: state.val, q: quality, c: errorString, ack: false });\n                }\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.clearTimeout(this.timeout);\n            this.timeout = undefined;\n            this.authRepository = undefined;\n            this.myUplinkRepository = undefined;\n            this.setState('info.connection', { val: false, ack: true });\n            this.log.info('Cleaned everything up...');\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Myuplink(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Myuplink())();\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
