{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { MyUplink } from './myUplink';\n\n// Helper functions:\n\n// For todays date;\ndeclare global {\n    interface Date {\n        today(): string;\n    }\n}\nDate.prototype.today = function (): string {\n    return this.getFullYear() + '-' + (this.getMonth() + 1 < 10 ? '0' : '') + (this.getMonth() + 1) + '-' + (this.getDate() < 10 ? '0' : '') + this.getDate();\n};\n\n// For the time now\ndeclare global {\n    interface Date {\n        timeNow(): string;\n    }\n}\nDate.prototype.timeNow = function (): string {\n    return (this.getHours() < 10 ? '0' : '') + this.getHours() + ':' + (this.getMinutes() < 10 ? '0' : '') + this.getMinutes() + ':' + (this.getSeconds() < 10 ? '0' : '') + this.getSeconds();\n};\n\nclass Myuplink extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'myuplink',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.refreshInterval = 0;\n    }\n\n    private myUplink: MyUplink | undefined;\n    private timeout: ioBroker.Timeout | undefined;\n    private refreshInterval: number;\n\n    async CreateSystemAsync(path: string, name: string): Promise<void> {\n        this.log.debug(`create Device: ${path}`);\n        await this.setObjectNotExistsAsync(path, {\n            type: 'device',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    async CreateDeviceAsync(path: string, name: string): Promise<void> {\n        this.log.debug(`create Channel: ${path}`);\n        await this.setObjectNotExistsAsync(path, {\n            type: 'channel',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    async CreateCategoryAsync(path: string, name: string): Promise<void> {\n        this.log.debug(`create Folder: ${path}`);\n        await this.setObjectNotExistsAsync(path, {\n            type: 'folder',\n            common: {\n                name: name,\n            },\n            native: {},\n        });\n    }\n\n    async CreateStringStateAsync(path: string, name: string, value: string, createObject: boolean, role: string = 'text'): Promise<void> {\n        if (createObject) {\n            this.log.debug(`create string state: ${path}`);\n            await this.setObjectNotExistsAsync(path, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'string',\n                    role: role,\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        }\n        await this.setStateAsync(path, { val: value, ack: true });\n    }\n\n    async CreateBooleanStateAsync(path: string, name: string, role: string, value: boolean, createObject: boolean): Promise<void> {\n        if (createObject) {\n            this.log.debug(`create boolean state: ${path}`);\n            await this.setObjectNotExistsAsync(path, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'boolean',\n                    role: role,\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        }\n        await this.setStateAsync(path, { val: value, ack: true });\n    }\n\n    async CreateWritableStringObjectAsync(path: string, name: string, role: string, deviceId: string): Promise<void> {\n        this.log.debug(`create writeable string state: ${path}`);\n        await this.extendObjectAsync(path, {\n            type: 'state',\n            common: {\n                name: name,\n                type: 'string',\n                role: role,\n                read: true,\n                write: true,\n            },\n            native: {\n                rawJson: true,\n                writable: true,\n                deviceId: deviceId,\n            },\n        });\n    }\n\n    async CreateParameterObjectAsync(\n        path: string,\n        name: string,\n        deviceId: string | null | undefined,\n        parameterId: string | null | undefined,\n        role: string,\n        writable: boolean,\n        unit: string | undefined,\n        min: number | undefined,\n        max: number | undefined,\n        step: number | undefined,\n        states: Record<string, string> | undefined,\n    ): Promise<void> {\n        const obj: ioBroker.SettableObject = {\n            type: 'state',\n            common: {\n                name: name,\n                type: 'number',\n                role: role,\n                read: true,\n                write: writable,\n                unit: unit,\n                min: min,\n                max: max,\n                step: step,\n                states: states,\n            },\n            native: {\n                parameterId: parameterId,\n                writable: writable,\n                deviceId: deviceId,\n            },\n        };\n        await this.extendObjectAsync(path, obj);\n    }\n\n    async SetStateAsync(path: string, value: string | number | boolean | null): Promise<void> {\n        await this.setStateAsync(path, { val: value, ack: true });\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        this.log.info('Starting adapter.');\n\n        await this.setInfoObjects();\n\n        this.refreshInterval = this.config.Interval * 60;\n        if (this.refreshInterval < 60) {\n            this.refreshInterval = 60;\n        }\n\n        const dataDir = utils.getAbsoluteDefaultDataDir();\n        const storeDir = path.join(dataDir, `myuplink_${this.instance}`);\n        try {\n            // create directory\n            if (!fs.existsSync(storeDir)) {\n                fs.mkdirSync(storeDir);\n            }\n        } catch (err) {\n            this.log.error('Could not create storage directory (' + storeDir + '): ' + err);\n            return;\n        }\n\n        try {\n            this.myUplink = new MyUplink(this, this.config, storeDir, this.log);\n        } catch (error) {\n            this.setState('info.connection', { val: false, ack: true });\n            this.setState('info.currentError', { val: `${error}`, ack: true });\n            return;\n        }\n\n        await this.subscribeStatesAsync('*');\n\n        this.log.info('Adapter started.');\n\n        await this.getDataAsync();\n    }\n\n    private async getDataAsync(): Promise<void> {\n        if (this.myUplink) {\n            const error = await this.myUplink.GetDataAsync();\n            const newDate = new Date();\n            const datetime = newDate.today() + ' ' + newDate.timeNow();\n            if (error) {\n                await this.setStateAsync('info.connection', { val: false, ack: true });\n                await this.setStateAsync('info.lastErrorTime', { val: datetime, ack: true });\n                await this.setStateAsync('info.lastError', { val: error, ack: true });\n                await this.setStateAsync('info.currentError', { val: error, ack: true });\n            } else {\n                await this.setStateAsync('info.connection', { val: true, expire: this.refreshInterval + 30, ack: true });\n                await this.setStateAsync('info.updateTime', { val: datetime, ack: true });\n                await this.setStateAsync('info.currentError', { val: '', ack: true });\n            }\n        }\n\n        this.log.debug('Set timer');\n        this.timeout = this.setTimeout(\n            async () => {\n                await this.getDataAsync();\n            },\n            <number>this.refreshInterval * 1000,\n        );\n    }\n\n    private async setInfoObjects(): Promise<void> {\n        await this.setObjectNotExistsAsync('info', {\n            type: 'channel',\n            common: {\n                name: 'Information',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.connection', {\n            type: 'state',\n            common: {\n                name: 'Connected to myUplink',\n                role: 'indicator.connected',\n                type: 'boolean',\n                read: true,\n                write: false,\n                def: false,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.currentError', {\n            type: 'state',\n            common: {\n                name: 'Current Error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.updateTime', {\n            type: 'state',\n            common: {\n                name: 'Time of the last update',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.lastError', {\n            type: 'state',\n            common: {\n                name: 'Last Error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync('info.lastErrorTime', {\n            type: 'state',\n            common: {\n                name: 'Time of the last error',\n                role: 'text',\n                type: 'string',\n                read: true,\n                write: false,\n                def: '',\n            },\n            native: {},\n        });\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state != null && state.ack === false && state.q == this.constants.STATE_QUALITY.GOOD && state.val != null && this.myUplink != null) {\n            this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n            const obj = await this.getObjectAsync(id);\n            if (obj != null && obj.native != null && obj.native.writable == true && obj.native.deviceId) {\n                const deviceId: string = obj.native.deviceId;\n                const parameterId: string | null = obj.native.parameterId?.toString();\n                const error = await this.myUplink.SetDataAsync(id, state.val, deviceId, parameterId, obj.native.rawJson === true);\n                if (error) {\n                    await this.setStateAsync(id, { val: state.val, q: this.constants.STATE_QUALITY.DEVICE_ERROR_REPORT, ack: false, c: error });\n                }\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.clearTimeout(this.timeout);\n            this.timeout = undefined;\n            this.myUplink = undefined;\n            this.setState('info.connection', { val: false, ack: true });\n            this.log.info('Cleaned everything up...');\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Myuplink(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Myuplink())();\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
