{
  "version": 3,
  "sources": ["../src/myUplinkLogic.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport { AuthRepository } from './authRepository';\nimport type { Alarm } from './models/Alarm';\nimport type { ParameterData } from './models/ParameterData';\nimport type { SystemDevice } from './models/SystemDevice';\nimport type { SystemWithDevices } from './models/SystemWithDevices';\nimport { MyUplinkRepository } from './myUplinkRepository';\nimport type { AdapterConfig, DataTarget, Logger, RenameData, StateValue } from './types';\n\n/**\n * Class representing the logic for MyUplink.\n */\nexport class MyUplinkLogic {\n    /**\n     * Creates an instance of MyUplinkLogic.\n     *\n     * @param dataTarget - The data target.\n     * @param config - The adapter configuration.\n     * @param storeDir - The directory to store session data.\n     * @param log - The logger instance.\n     */\n    constructor(dataTarget: DataTarget, config: AdapterConfig, storeDir: string, log: Logger) {\n        this.dataTarget = dataTarget;\n        this.config = config;\n        this.log = log;\n\n        config.RenameSystemIds?.forEach((renameData: RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                const newSystemId = this.replaceForbiddenCharacters(renameData.NewId);\n                this.log.debug(`Map System ID: ${renameData.OriginalId} -> ${newSystemId}`);\n                this.systemIds.set(renameData.OriginalId, newSystemId);\n            }\n        });\n        config.RenameDeviceIds?.forEach((renameData: RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                const newDeviceId = this.replaceForbiddenCharacters(renameData.NewId);\n                this.log.debug(`Map Device ID: ${renameData.OriginalId} -> ${newDeviceId}`);\n                this.deviceIds.set(renameData.OriginalId, newDeviceId);\n            }\n        });\n        config.RenameCategories?.forEach((renameData: RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                const newCategory = this.replaceForbiddenCharacters(renameData.NewId);\n                this.log.debug(`Map Category: ${renameData.OriginalId} -> ${newCategory}`);\n                this.categories.set(renameData.OriginalId, newCategory);\n            }\n        });\n        config.RenameDataIds?.forEach((renameData: RenameData) => {\n            if (renameData.OriginalId && renameData.NewId) {\n                const newId = this.replaceForbiddenCharacters(renameData.NewId);\n                this.log.debug(`Map Data ID: ${renameData.OriginalId} -> ${newId}`);\n                this.parameterIds.set(renameData.OriginalId, newId);\n                if (renameData.Category) {\n                    const category = this.replaceForbiddenCharacters(renameData.Category);\n                    this.log.debug(`Set Data ID Category: ${renameData.OriginalId}: ${category}`);\n                    this.parameterIdToCategory.set(renameData.OriginalId, category);\n                }\n            }\n        });\n\n        const identifier: string = config.Identifier.trim();\n        const secret: string = config.Secret.trim();\n        const callbackURL: string = config.CallbackURL.trim();\n        const configured: boolean = config.Configured;\n\n        let error = false;\n        if (identifier == '' || identifier == null) {\n            if (configured != false) {\n                this.log.error('Missing Identifier in the settings!');\n            }\n            error = true;\n        }\n        if (secret == '' || secret == null) {\n            if (configured != false) {\n                this.log.error('Missing Secret in the settings!');\n            }\n            error = true;\n        }\n        if (callbackURL == '' || callbackURL == null) {\n            if (configured != false) {\n                this.log.error('Missing Callback URL in the settings!');\n            }\n            error = true;\n        }\n        if (error) {\n            throw new Error('Missing settings!');\n        }\n\n        const storeFile = path.join(storeDir, 'session.json');\n        this.authRepository = new AuthRepository(\n            {\n                clientId: identifier,\n                clientSecret: secret,\n                useAuthorizationCodeGrant: config.UseAuthorizationCodeGrant,\n                redirectUri: callbackURL,\n                authCode: config.AuthCode.trim(),\n                sessionStoreFilePath: storeFile,\n                baseUrl: 'https://api.myuplink.com',\n                scope: 'READSYSTEM WRITESYSTEM',\n                timeout: 45000,\n                userAgent: 'iobroker.myuplink',\n                renewBeforeExpiry: 5 * 60 * 1000,\n            },\n            log,\n        );\n        this.myUplinkRepository = new MyUplinkRepository(\n            {\n                baseUrl: 'https://api.myuplink.com',\n                timeout: 45000,\n                userAgent: 'iobroker.myuplink',\n                language: config.Language,\n            },\n            this.log,\n        );\n    }\n\n    authRepository: AuthRepository;\n    myUplinkRepository: MyUplinkRepository;\n    private STRICT_FORBIDDEN_CHARS = /[^a-zA-Z0-9_-]+/gu;\n    private dataTarget: DataTarget;\n    private config: AdapterConfig;\n    private log: Logger;\n    private systemIds: Map<string, string> = new Map<string, string>();\n    private deviceIds: Map<string, string> = new Map<string, string>();\n    private categories: Map<string, string> = new Map<string, string>();\n    private parameterIds: Map<string, string> = new Map<string, string>();\n    private parameterIdToCategory: Map<string, string> = new Map<string, string>();\n    private objectIdIdByParameterIdByDeviceId: Map<string, Map<string, string>> = new Map<\n        string,\n        Map<string, string>\n    >();\n    private existingSystemIds: string[] = [];\n    private existingCategoryPaths: string[] = [];\n\n    /**\n     * Async function to get data asynchronously.\n     *\n     * @returns a promise with the error string (if there was an error) or undefined (if its all good)\n     */\n    async GetDataAsync(): Promise<string | undefined> {\n        try {\n            const accessToken = await this.authRepository.getAccessTokenAsync();\n            const systems = await this.myUplinkRepository.getSystemsAndDevicesAsync(accessToken);\n\n            if (systems.systems) {\n                for (const value of systems.systems) {\n                    await this.setSystemWithDevicesAsync(value, accessToken);\n                }\n            }\n        } catch (error) {\n            const errorString = `${error as any}`;\n            this.log.error(errorString);\n            return errorString;\n        }\n    }\n\n    /**\n     * A function to asynchronously set data.\n     *\n     * @param id - the object id\n     * @param value - the value to be set\n     * @param deviceId - the id of the device\n     * @param parameterId - the id of the parameter, or null\n     * @param isRawJson - flag indicating if the value is raw JSON\n     * @returns a promise with the error string (if there was an error) or undefined (if its all good)\n     */\n    async SetDataAsync(\n        id: string,\n        value: StateValue,\n        deviceId: string,\n        parameterId: string | null,\n        isRawJson: boolean,\n    ): Promise<string | undefined> {\n        try {\n            const accessToken = await this.authRepository.getAccessTokenAsync();\n            if (accessToken) {\n                const valueAsString = value.toString();\n                if (parameterId) {\n                    const result = await this.myUplinkRepository.setDevicePointAsync(\n                        deviceId,\n                        accessToken,\n                        parameterId,\n                        valueAsString,\n                    );\n                    if (result && parameterId in result && result[parameterId] == 'modified') {\n                        this.log.debug(`Parameter ${parameterId} modified by API`);\n                        await this.dataTarget.SetStateAsync(id, value);\n                    }\n                } else if (isRawJson === true && valueAsString) {\n                    const keyValueDictionary: Record<string, string> = JSON.parse(valueAsString);\n                    if (Object.keys(keyValueDictionary).length > 0) {\n                        const result = await this.myUplinkRepository.setDevicePointsAsync(\n                            deviceId,\n                            accessToken,\n                            keyValueDictionary,\n                        );\n                        await this.dataTarget.SetStateAsync(id, value);\n                        const objectIdByParameterId = this.objectIdIdByParameterIdByDeviceId.get(deviceId);\n                        if (objectIdByParameterId && result) {\n                            for (const [parameterId, value] of Object.entries(keyValueDictionary)) {\n                                const objectId = objectIdByParameterId.get(parameterId);\n                                const valNumber = parseFloat(value);\n                                if (\n                                    objectId &&\n                                    !Number.isNaN(valNumber) &&\n                                    parameterId in result &&\n                                    result[parameterId] == 'modified'\n                                ) {\n                                    await this.dataTarget.SetStateAsync(objectId, valNumber);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (error) {\n            const errorString = `${error as any}`;\n            this.log.error(errorString);\n            return errorString;\n        }\n    }\n\n    private async setSystemWithDevicesAsync(system: SystemWithDevices, accessToken: string): Promise<void> {\n        if (system.systemId != undefined && system.name != undefined) {\n            const systemIdExists = this.existingSystemIds.includes(system.systemId);\n            const firstRun = !systemIdExists;\n            if (!systemIdExists) {\n                this.existingSystemIds.push(system.systemId);\n            }\n            const systemId = this.replaceForbiddenCharacters(system.systemId);\n            const newSystemId = this.systemIds.get(systemId);\n            const systemPath = newSystemId ?? systemId;\n            const systemName = this.removeSoftHyphen(system.name);\n            if (firstRun) {\n                await this.dataTarget.CreateSystemAsync(systemPath, systemName);\n            }\n            await this.dataTarget.CreateStringObjectAsync(\n                `${systemPath}.systemId`,\n                'System ID',\n                system.systemId,\n                firstRun,\n            );\n            await this.dataTarget.CreateStringObjectAsync(\n                `${systemPath}.name`,\n                'Name',\n                systemName,\n                firstRun,\n                'info.name',\n            );\n            if (system.country != undefined) {\n                await this.dataTarget.CreateStringObjectAsync(\n                    `${systemPath}.country`,\n                    'Country',\n                    system.country,\n                    firstRun,\n                );\n            }\n            if (system.securityLevel != undefined) {\n                await this.dataTarget.CreateStringObjectAsync(\n                    `${systemPath}.securityLevel`,\n                    'Security Level',\n                    system.securityLevel,\n                    firstRun,\n                );\n            }\n            if (system.hasAlarm != undefined) {\n                await this.dataTarget.CreateBooleanObjectAsync(\n                    `${systemPath}.hasAlarm`,\n                    'Has Alarm',\n                    'indicator.alarm',\n                    system.hasAlarm,\n                    firstRun,\n                );\n            }\n            if (system.devices) {\n                for (const device of system.devices) {\n                    await this.setSystemDeviceAsync(device, systemPath, accessToken);\n                }\n            }\n\n            if (this.config.AddActiveNotifications) {\n                const notifications = await this.myUplinkRepository?.getActiveNotificationsAsync(\n                    system.systemId,\n                    accessToken,\n                );\n                if (this.config.AddRawActiveNotifications) {\n                    await this.dataTarget.CreateStringObjectAsync(\n                        `${systemPath}.rawActiveNotifications`,\n                        'Received raw JSON of active notifications',\n                        JSON.stringify(notifications?.notifications, null, ''),\n                        firstRun,\n                    );\n                }\n                let notificationsDescriptions = '';\n                notifications?.notifications?.forEach((notification: Alarm) => {\n                    notificationsDescriptions += `${notification.header}: ${notification.description}\\n`;\n                });\n                await this.dataTarget.CreateStringObjectAsync(\n                    `${systemPath}.activeNotifications`,\n                    'Active notification descriptions',\n                    notificationsDescriptions,\n                    firstRun,\n                );\n            }\n        }\n    }\n\n    private async setSystemDeviceAsync(device: SystemDevice, systemPath: string, accessToken: string): Promise<void> {\n        if (device.id != undefined && device.product?.name != undefined) {\n            const existingMap = this.objectIdIdByParameterIdByDeviceId.get(device.id);\n            const firstRun = !existingMap;\n            const stateIdByParameterId = existingMap ?? new Map<string, string>();\n            if (!existingMap) {\n                this.objectIdIdByParameterIdByDeviceId.set(device.id, stateIdByParameterId);\n            }\n            const deviceId = this.replaceForbiddenCharacters(device.id);\n            const newDeviceId = this.deviceIds.get(deviceId);\n            const deviceSubPath = newDeviceId ?? deviceId;\n            const devicePath = `${systemPath}.${deviceSubPath}`;\n            const deviceName = this.removeSoftHyphen(device.product.name);\n            if (firstRun) {\n                await this.dataTarget.CreateDeviceAsync(devicePath, deviceName);\n            }\n            await this.dataTarget.CreateStringObjectAsync(`${devicePath}.deviceId`, 'Device ID', device.id, firstRun);\n            await this.dataTarget.CreateStringObjectAsync(\n                `${devicePath}.name`,\n                'Name',\n                deviceName,\n                firstRun,\n                'info.name',\n            );\n            if (device.connectionState != undefined) {\n                await this.dataTarget.CreateStringObjectAsync(\n                    `${devicePath}.connectionState`,\n                    'Connection State',\n                    device.connectionState,\n                    firstRun,\n                    'info.status',\n                );\n            }\n            if (device.currentFwVersion != undefined) {\n                await this.dataTarget.CreateStringObjectAsync(\n                    `${devicePath}.currentFwVersion`,\n                    'Current Firmware Version',\n                    device.currentFwVersion,\n                    firstRun,\n                    'info.firmware',\n                );\n            }\n            if (device.product?.serialNumber != undefined) {\n                await this.dataTarget.CreateStringObjectAsync(\n                    `${devicePath}.serialNumber`,\n                    'Serial Number',\n                    device.product.serialNumber,\n                    firstRun,\n                    'info.serial',\n                );\n            }\n\n            if (this.config.AddData) {\n                const devicePoints = await this.myUplinkRepository?.getDevicePointsAsync(device.id, accessToken);\n                if (this.config.AddRawData) {\n                    await this.dataTarget.CreateStringObjectAsync(\n                        `${devicePath}.rawData`,\n                        'Received raw JSON of parameter data',\n                        JSON.stringify(devicePoints, null, ''),\n                        firstRun,\n                    );\n                }\n                if (devicePoints) {\n                    for (const data of devicePoints) {\n                        await this.setParameterDataAsync(data, devicePath, device.id, stateIdByParameterId);\n                    }\n                }\n                if (firstRun) {\n                    await this.dataTarget.CreateWritableStringObjectAsync(\n                        `${devicePath}.setData`,\n                        'Send raw JSON of parameter data',\n                        'json',\n                        device.id,\n                    );\n                }\n            }\n        }\n    }\n\n    private async setParameterDataAsync(\n        data: ParameterData,\n        devicePath: string,\n        deviceId: string | null | undefined,\n        stateIdByParameterId: Map<string, string>,\n    ): Promise<void> {\n        if (data.parameterId) {\n            const existingObjectId = stateIdByParameterId.get(data.parameterId);\n            const stateId =\n                existingObjectId ??\n                (await this.getObjectIdAndCreateCategoryAsync(data.parameterId, data.category, devicePath));\n            if (!existingObjectId) {\n                stateIdByParameterId.set(data.parameterId, stateId);\n                await this.createParameterObjectAsync(data, deviceId, stateId);\n                //this.log.debug(`Created parameter object: ${stateId}`);\n            }\n            //this.log.debug(`Set state ${stateId} to ${data.value}`);\n            await this.dataTarget.SetStateAsync(stateId, data.value ?? null);\n        }\n    }\n\n    private async getObjectIdAndCreateCategoryAsync(\n        parameterId: string,\n        category: string | null | undefined,\n        devicePath: string,\n    ): Promise<string> {\n        const parameterSubPath = this.parameterIds.get(parameterId) ?? this.replaceForbiddenCharacters(parameterId);\n        const newCategory = this.parameterIdToCategory.get(parameterId);\n        let categorySubPath: string | null = null;\n        if (newCategory) {\n            categorySubPath = newCategory;\n        } else if (category && this.config.GroupData) {\n            const categoryId = this.replaceForbiddenCharacters(category);\n            categorySubPath = this.categories.get(category) ?? this.categories.get(categoryId) ?? categoryId;\n        }\n        if (categorySubPath) {\n            const categoryPath = `${devicePath}.${categorySubPath}`;\n            if (!this.existingCategoryPaths.includes(categoryPath)) {\n                this.existingCategoryPaths.push(categoryPath);\n                await this.dataTarget.CreateCategoryAsync(categoryPath, newCategory ?? category ?? categorySubPath);\n            }\n            return `${devicePath}.${categorySubPath}.${parameterSubPath}`;\n        }\n        return `${devicePath}.${parameterSubPath}`;\n    }\n\n    private async createParameterObjectAsync(\n        data: ParameterData,\n        deviceId: string | null | undefined,\n        stateId: string,\n    ): Promise<void> {\n        let role = 'value';\n        let unit: string | undefined = undefined;\n        if (data.parameterUnit) {\n            unit = data.parameterUnit;\n            switch (data.parameterUnit) {\n                case 'kWh':\n                case 'Ws':\n                    role = 'value.energy';\n                    break;\n                case 'W':\n                case 'kW':\n                    role = 'value.power';\n                    break;\n                case '\u00B0C':\n                    role = 'value.temperature';\n                    break;\n                case 'Hz':\n                    role = 'value.frequency';\n                    break;\n                case 'A':\n                    role = 'value.current';\n                    break;\n                case 'V':\n                    role = 'value.voltage';\n                    break;\n                case '%RH':\n                    role = 'value.humidity';\n                    unit = '%';\n                    break;\n                case 'bar':\n                    role = 'value.pressure';\n                    break;\n            }\n        }\n        let states: Record<string, string> | undefined = undefined;\n        if (data.enumValues && data.enumValues.length > 0) {\n            states = {};\n            for (const enumValue of data.enumValues) {\n                if (enumValue.text && enumValue.value) {\n                    states[enumValue.value] = this.removeSoftHyphen(enumValue.text);\n                }\n            }\n        }\n        const name = this.removeSoftHyphen(data.parameterName ?? '');\n        const writable = data.writable ?? false;\n        let min: number | undefined = undefined;\n        let max: number | undefined = undefined;\n        if (data.minValue != null && data.maxValue != null) {\n            if (data.minValue < data.maxValue) {\n                if (data.value != null && (data.value < data.minValue || data.value > data.maxValue)) {\n                    this.log.warn(\n                        `Parameter '${data.parameterId}': value is outside min/max. Value: ${data.value}, Min: ${data.minValue}, Max: ${data.maxValue}. Ignoring min/max.`,\n                    );\n                } else {\n                    min = data.minValue;\n                    max = data.maxValue;\n                }\n            } else {\n                this.log.warn(\n                    `Parameter '${data.parameterId}': min is bigger than max. Min: ${data.minValue}, Max: ${data.maxValue}. Ignoring min/max.`,\n                );\n            }\n        }\n        const step = data.stepValue ?? undefined;\n        await this.dataTarget.CreateOrUpdateParameterObjectAsync(\n            stateId,\n            name,\n            deviceId,\n            data.parameterId,\n            role,\n            writable,\n            unit,\n            min,\n            max,\n            step,\n            states,\n        );\n    }\n\n    private removeSoftHyphen(text: string): string {\n        return text.replace(new RegExp('\\u00AD', 'g'), '').trim();\n    }\n\n    private replaceForbiddenCharacters(text: string): string {\n        return this.removeSoftHyphen(text).replace(this.STRICT_FORBIDDEN_CHARS, '_');\n    }\n}\n"],
  "mappings": "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",
  "names": ["parameterId", "value"]
}
