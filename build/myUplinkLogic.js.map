{
  "version": 3,
  "sources": ["../src/myUplinkLogic.ts"],
  "sourcesContent": ["import * as path from 'path';\r\nimport { AuthRepository } from './authRepository';\r\nimport { Alarm } from './models/Alarm';\r\nimport { ParameterData } from './models/ParameterData';\r\nimport { SystemDevice } from './models/SystemDevice';\r\nimport { SystemWithDevices } from './models/SystemWithDevices';\r\nimport { MyUplinkRepository } from './myUplinkRepository';\r\nimport { AdapterConfig, DataTarget, Logger, RenameData, StateValue } from './types';\r\n\r\nexport class MyUplinkLogic {\r\n    constructor(dataTarget: DataTarget, config: AdapterConfig, storeDir: string, log: Logger) {\r\n        this.dataTarget = dataTarget;\r\n        this.config = config;\r\n        this.log = log;\r\n\r\n        config.RenameSystemIds?.forEach((renameData: RenameData) => {\r\n            if (renameData.OriginalId && renameData.NewId) {\r\n                const newSystemId = this.replaceForbiddenCharacters(renameData.NewId);\r\n                this.log.debug(`Map System ID: ${renameData.OriginalId} -> ${newSystemId}`);\r\n                this.systemIds.set(renameData.OriginalId, newSystemId);\r\n            }\r\n        });\r\n        config.RenameDeviceIds?.forEach((renameData: RenameData) => {\r\n            if (renameData.OriginalId && renameData.NewId) {\r\n                const newDeviceId = this.replaceForbiddenCharacters(renameData.NewId);\r\n                this.log.debug(`Map Device ID: ${renameData.OriginalId} -> ${newDeviceId}`);\r\n                this.deviceIds.set(renameData.OriginalId, newDeviceId);\r\n            }\r\n        });\r\n        config.RenameCategories?.forEach((renameData: RenameData) => {\r\n            if (renameData.OriginalId && renameData.NewId) {\r\n                const newCategory = this.replaceForbiddenCharacters(renameData.NewId);\r\n                this.log.debug(`Map Category: ${renameData.OriginalId} -> ${newCategory}`);\r\n                this.categories.set(renameData.OriginalId, newCategory);\r\n            }\r\n        });\r\n        config.RenameDataIds?.forEach((renameData: RenameData) => {\r\n            if (renameData.OriginalId && renameData.NewId) {\r\n                const newId = this.replaceForbiddenCharacters(renameData.NewId);\r\n                this.log.debug(`Map Data ID: ${renameData.OriginalId} -> ${newId}`);\r\n                this.parameterIds.set(renameData.OriginalId, newId);\r\n                if (renameData.Category) {\r\n                    const category = this.replaceForbiddenCharacters(renameData.Category);\r\n                    this.log.debug(`Set Data ID Category: ${renameData.OriginalId}: ${category}`);\r\n                    this.parameterIdToCategory.set(renameData.OriginalId, category);\r\n                }\r\n            }\r\n        });\r\n\r\n        const identifier: string = config.Identifier.trim();\r\n        const secret: string = config.Secret.trim();\r\n        const callbackURL: string = config.CallbackURL.trim();\r\n        const configured: boolean = config.Configured;\r\n\r\n        let error = false;\r\n        if (identifier == '' || identifier == null) {\r\n            if (configured != false) {\r\n                this.log.error('Missing Identifier in the settings!');\r\n            }\r\n            error = true;\r\n        }\r\n        if (secret == '' || secret == null) {\r\n            if (configured != false) {\r\n                this.log.error('Missing Secret in the settings!');\r\n            }\r\n            error = true;\r\n        }\r\n        if (callbackURL == '' || callbackURL == null) {\r\n            if (configured != false) {\r\n                this.log.error('Missing Callback URL in the settings!');\r\n            }\r\n            error = true;\r\n        }\r\n        if (error) {\r\n            throw new Error('Missing settings!');\r\n        }\r\n\r\n        const storeFile = path.join(storeDir, 'session.json');\r\n        this.authRepository = new AuthRepository(\r\n            {\r\n                clientId: identifier,\r\n                clientSecret: secret,\r\n                useAuthorizationCodeGrant: config.UseAuthorizationCodeGrant,\r\n                redirectUri: callbackURL,\r\n                authCode: config.AuthCode.trim(),\r\n                sessionStoreFilePath: storeFile,\r\n                baseUrl: 'https://api.myuplink.com',\r\n                scope: 'READSYSTEM WRITESYSTEM',\r\n                timeout: 45000,\r\n                userAgent: 'iobroker.myuplink',\r\n                renewBeforeExpiry: 5 * 60 * 1000,\r\n            },\r\n            log,\r\n        );\r\n        this.myUplinkRepository = new MyUplinkRepository(\r\n            {\r\n                baseUrl: 'https://api.myuplink.com',\r\n                timeout: 45000,\r\n                userAgent: 'iobroker.myuplink',\r\n                language: config.Language,\r\n            },\r\n            this.log,\r\n        );\r\n    }\r\n\r\n    authRepository: AuthRepository;\r\n    myUplinkRepository: MyUplinkRepository;\r\n    private STRICT_FORBIDDEN_CHARS = /[^a-zA-Z0-9_-]+/gu;\r\n    private dataTarget: DataTarget;\r\n    private config: AdapterConfig;\r\n    private log: Logger;\r\n    private systemIds: Map<string, string> = new Map<string, string>();\r\n    private deviceIds: Map<string, string> = new Map<string, string>();\r\n    private categories: Map<string, string> = new Map<string, string>();\r\n    private parameterIds: Map<string, string> = new Map<string, string>();\r\n    private parameterIdToCategory: Map<string, string> = new Map<string, string>();\r\n    private objectIdIdByParameterIdByDeviceId: Map<string, Map<string, string>> = new Map<string, Map<string, string>>();\r\n    private existingSystemIds: string[] = [];\r\n    private existingCategoryPaths: string[] = [];\r\n\r\n    /**\r\n     * Async function to get data asynchronously.\r\n     *\r\n     * @return {Promise<string | undefined>} a promise with the error string (if there was an error) or undefined (if its all good)\r\n     */\r\n    async GetDataAsync(): Promise<string | undefined> {\r\n        try {\r\n            const accessToken = await this.authRepository.getAccessTokenAsync();\r\n            const systems = await this.myUplinkRepository.getSystemsAndDevicesAsync(accessToken);\r\n\r\n            if (systems.systems) {\r\n                for (const value of systems.systems) {\r\n                    await this.setSystemWithDevicesAsync(value, accessToken);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            const errorString = `${error}`;\r\n            this.log.error(errorString);\r\n            return errorString;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A function to asynchronously set data.\r\n     *\r\n     * @param {string} id - the object id\r\n     * @param {StateValue} value - the value to be set\r\n     * @param {string} deviceId - the id of the device\r\n     * @param {string | null} parameterId - the id of the parameter, or null\r\n     * @param {boolean} isRawJson - flag indicating if the value is raw JSON\r\n     * @return {Promise<string | undefined>} a promise with the error string (if there was an error) or undefined (if its all good)\r\n     */\r\n    async SetDataAsync(id: string, value: StateValue, deviceId: string, parameterId: string | null, isRawJson: boolean): Promise<string | undefined> {\r\n        try {\r\n            const accessToken = await this.authRepository.getAccessTokenAsync();\r\n            if (accessToken) {\r\n                const valueAsString = value.toString();\r\n                if (parameterId) {\r\n                    const result = await this.myUplinkRepository.setDevicePointAsync(deviceId, accessToken, parameterId, valueAsString);\r\n                    if (result && parameterId in result && result[parameterId] == 'modified') {\r\n                        this.log.debug(`Parameter ${parameterId} modified by API`);\r\n                        await this.dataTarget.SetStateAsync(id, value);\r\n                    }\r\n                } else if (isRawJson === true && valueAsString) {\r\n                    const keyValueDictionary: Record<string, string> = JSON.parse(valueAsString);\r\n                    if (Object.keys(keyValueDictionary).length > 0) {\r\n                        const result = await this.myUplinkRepository.setDevicePointsAsync(deviceId, accessToken, keyValueDictionary);\r\n                        await this.dataTarget.SetStateAsync(id, value);\r\n                        const objectIdByParameterId = this.objectIdIdByParameterIdByDeviceId.get(deviceId);\r\n                        if (objectIdByParameterId && result) {\r\n                            for (const [parameterId, value] of Object.entries(keyValueDictionary)) {\r\n                                const objectId = objectIdByParameterId.get(parameterId);\r\n                                const valNumber = parseFloat(value);\r\n                                if (objectId && !Number.isNaN(valNumber) && parameterId in result && result[parameterId] == 'modified') {\r\n                                    await this.dataTarget.SetStateAsync(objectId, valNumber);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            const errorString = `${error}`;\r\n            this.log.error(errorString);\r\n            return errorString;\r\n        }\r\n    }\r\n\r\n    private async setSystemWithDevicesAsync(system: SystemWithDevices, accessToken: string): Promise<void> {\r\n        if (system.systemId != undefined && system.name != undefined) {\r\n            const systemIdExists = this.existingSystemIds.includes(system.systemId);\r\n            const firstRun = !systemIdExists;\r\n            if (!systemIdExists) {\r\n                this.existingSystemIds.push(system.systemId);\r\n            }\r\n            const systemId = this.replaceForbiddenCharacters(system.systemId);\r\n            const newSystemId = this.systemIds.get(systemId);\r\n            const systemPath = newSystemId ?? systemId;\r\n            const systemName = this.removeSoftHyphen(system.name);\r\n            if (firstRun) {\r\n                await this.dataTarget.CreateSystemAsync(systemPath, systemName);\r\n            }\r\n            await this.dataTarget.CreateStringObjectAsync(`${systemPath}.systemId`, 'System ID', system.systemId, firstRun);\r\n            await this.dataTarget.CreateStringObjectAsync(`${systemPath}.name`, 'Name', systemName, firstRun, 'info.name');\r\n            if (system.country != undefined) {\r\n                await this.dataTarget.CreateStringObjectAsync(`${systemPath}.country`, 'Country', system.country, firstRun);\r\n            }\r\n            if (system.securityLevel != undefined) {\r\n                await this.dataTarget.CreateStringObjectAsync(`${systemPath}.securityLevel`, 'Security Level', system.securityLevel, firstRun);\r\n            }\r\n            if (system.hasAlarm != undefined) {\r\n                await this.dataTarget.CreateBooleanObjectAsync(`${systemPath}.hasAlarm`, 'Has Alarm', 'indicator.alarm', system.hasAlarm, firstRun);\r\n            }\r\n            if (system.devices) {\r\n                for (const device of system.devices) {\r\n                    await this.setSystemDeviceAsync(device, systemPath, accessToken);\r\n                }\r\n            }\r\n\r\n            if (this.config.AddActiveNotifications) {\r\n                const notifications = await this.myUplinkRepository?.getActiveNotificationsAsync(system.systemId, accessToken);\r\n                if (this.config.AddRawActiveNotifications) {\r\n                    await this.dataTarget.CreateStringObjectAsync(\r\n                        `${systemPath}.rawActiveNotifications`,\r\n                        'Received raw JSON of active notifications',\r\n                        JSON.stringify(notifications?.notifications, null, ''),\r\n                        firstRun,\r\n                    );\r\n                }\r\n                let notificationsDescriptions: string = '';\r\n                notifications?.notifications?.forEach((notification: Alarm) => {\r\n                    notificationsDescriptions += `${notification.header}: ${notification.description}\\n`;\r\n                });\r\n                await this.dataTarget.CreateStringObjectAsync(`${systemPath}.activeNotifications`, 'Active notification descriptions', notificationsDescriptions, firstRun);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async setSystemDeviceAsync(device: SystemDevice, systemPath: string, accessToken: string): Promise<void> {\r\n        if (device.id != undefined && device.product?.name != undefined) {\r\n            const existingMap = this.objectIdIdByParameterIdByDeviceId.get(device.id);\r\n            const firstRun = !existingMap;\r\n            const stateIdByParameterId = existingMap ?? new Map<string, string>();\r\n            if (!existingMap) {\r\n                this.objectIdIdByParameterIdByDeviceId.set(device.id, stateIdByParameterId);\r\n            }\r\n            const deviceId = this.replaceForbiddenCharacters(device.id);\r\n            const newDeviceId = this.deviceIds.get(deviceId);\r\n            const deviceSubPath = newDeviceId ?? deviceId;\r\n            const devicePath = `${systemPath}.${deviceSubPath}`;\r\n            const deviceName = this.removeSoftHyphen(device.product.name);\r\n            if (firstRun) {\r\n                await this.dataTarget.CreateDeviceAsync(devicePath, deviceName);\r\n            }\r\n            await this.dataTarget.CreateStringObjectAsync(`${devicePath}.deviceId`, 'Device ID', device.id, firstRun);\r\n            await this.dataTarget.CreateStringObjectAsync(`${devicePath}.name`, 'Name', deviceName, firstRun, 'info.name');\r\n            if (device.connectionState != undefined) {\r\n                await this.dataTarget.CreateStringObjectAsync(`${devicePath}.connectionState`, 'Connection State', device.connectionState, firstRun, 'info.status');\r\n            }\r\n            if (device.currentFwVersion != undefined) {\r\n                await this.dataTarget.CreateStringObjectAsync(`${devicePath}.currentFwVersion`, 'Current Firmware Version', device.currentFwVersion, firstRun, 'info.firmware');\r\n            }\r\n            if (device.product?.serialNumber != undefined) {\r\n                await this.dataTarget.CreateStringObjectAsync(`${devicePath}.serialNumber`, 'Serial Number', device.product.serialNumber, firstRun, 'info.serial');\r\n            }\r\n\r\n            if (this.config.AddData) {\r\n                const devicePoints = await this.myUplinkRepository?.getDevicePointsAsync(device.id, accessToken);\r\n                if (this.config.AddRawData) {\r\n                    await this.dataTarget.CreateStringObjectAsync(`${devicePath}.rawData`, 'Received raw JSON of parameter data', JSON.stringify(devicePoints, null, ''), firstRun);\r\n                }\r\n                if (devicePoints) {\r\n                    for (const data of devicePoints) {\r\n                        await this.setParameterDataAsync(data, devicePath, device.id, stateIdByParameterId);\r\n                    }\r\n                }\r\n                if (firstRun) {\r\n                    await this.dataTarget.CreateWritableStringObjectAsync(`${devicePath}.setData`, 'Send raw JSON of parameter data', 'json', device.id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async setParameterDataAsync(data: ParameterData, devicePath: string, deviceId: string | null | undefined, stateIdByParameterId: Map<string, string>): Promise<void> {\r\n        if (data.parameterId) {\r\n            const existingObjectId = stateIdByParameterId.get(data.parameterId);\r\n            const stateId = existingObjectId ?? (await this.getObjectIdAndCreateCategoryAsync(data.parameterId, data.category, devicePath));\r\n            if (!existingObjectId) {\r\n                stateIdByParameterId.set(data.parameterId, stateId);\r\n                await this.createParameterObjectAsync(data, deviceId, stateId);\r\n                //this.log.debug(`Created parameter object: ${stateId}`);\r\n            }\r\n            //this.log.debug(`Set state ${stateId} to ${data.value}`);\r\n            await this.dataTarget.SetStateAsync(stateId, data.value ?? null);\r\n        }\r\n    }\r\n\r\n    private async getObjectIdAndCreateCategoryAsync(parameterId: string, category: string | null | undefined, devicePath: string): Promise<string> {\r\n        const parameterSubPath = this.parameterIds.get(parameterId) ?? this.replaceForbiddenCharacters(parameterId);\r\n        const newCategory = this.parameterIdToCategory.get(parameterId);\r\n        let categorySubPath: string | null = null;\r\n        if (newCategory) {\r\n            categorySubPath = newCategory;\r\n        } else if (category && this.config.GroupData) {\r\n            const categoryId = this.replaceForbiddenCharacters(category);\r\n            categorySubPath = this.categories.get(category) ?? this.categories.get(categoryId) ?? categoryId;\r\n        }\r\n        if (categorySubPath) {\r\n            const categoryPath = `${devicePath}.${categorySubPath}`;\r\n            if (!this.existingCategoryPaths.includes(categoryPath)) {\r\n                this.existingCategoryPaths.push(categoryPath);\r\n                await this.dataTarget.CreateCategoryAsync(categoryPath, newCategory ?? category ?? categorySubPath);\r\n            }\r\n            return `${devicePath}.${categorySubPath}.${parameterSubPath}`;\r\n        } else {\r\n            return `${devicePath}.${parameterSubPath}`;\r\n        }\r\n    }\r\n\r\n    private async createParameterObjectAsync(data: ParameterData, deviceId: string | null | undefined, stateId: string): Promise<void> {\r\n        let role = 'value';\r\n        let unit: string | undefined = undefined;\r\n        if (data.parameterUnit) {\r\n            unit = data.parameterUnit;\r\n            switch (data.parameterUnit) {\r\n                case 'kWh':\r\n                case 'Ws':\r\n                    role = 'value.energy';\r\n                    break;\r\n                case 'W':\r\n                case 'kW':\r\n                    role = 'value.power';\r\n                    break;\r\n                case '\u00B0C':\r\n                    role = 'value.temperature';\r\n                    break;\r\n                case 'Hz':\r\n                    role = 'value.frequency';\r\n                    break;\r\n                case 'A':\r\n                    role = 'value.current';\r\n                    break;\r\n                case 'V':\r\n                    role = 'value.voltage';\r\n                    break;\r\n                case '%RH':\r\n                    role = 'value.humidity';\r\n                    unit = '%';\r\n                    break;\r\n                case 'bar':\r\n                    role = 'value.pressure';\r\n                    break;\r\n            }\r\n        }\r\n        let states: Record<string, string> | undefined = undefined;\r\n        if (data.enumValues && data.enumValues.length > 0) {\r\n            states = {};\r\n            for (const enumValue of data.enumValues) {\r\n                if (enumValue.text && enumValue.value) {\r\n                    states[enumValue.value] = this.removeSoftHyphen(enumValue.text);\r\n                }\r\n            }\r\n        }\r\n        const name = this.removeSoftHyphen(data.parameterName ?? '');\r\n        const writable = data.writable ?? false;\r\n        let min: number | undefined = undefined;\r\n        let max: number | undefined = undefined;\r\n        if (data.minValue != null && data.maxValue != null) {\r\n            if (data.minValue < data.maxValue) {\r\n                if (data.value != null && (data.value < data.minValue || data.value > data.maxValue)) {\r\n                    this.log.warn(\r\n                        `Parameter '${data.parameterId}': value is outside min/max. Value: ${data.value}, Min: ${data.minValue}, Max: ${data.maxValue}. Ignoring min/max.`,\r\n                    );\r\n                } else {\r\n                    min = data.minValue;\r\n                    max = data.maxValue;\r\n                }\r\n            } else {\r\n                this.log.warn(`Parameter '${data.parameterId}': min is bigger than max. Min: ${data.minValue}, Max: ${data.maxValue}. Ignoring min/max.`);\r\n            }\r\n        }\r\n        const step = data.stepValue ?? undefined;\r\n        await this.dataTarget.CreateOrUpdateParameterObjectAsync(stateId, name, deviceId, data.parameterId, role, writable, unit, min, max, step, states);\r\n    }\r\n\r\n    private removeSoftHyphen(text: string): string {\r\n        return text.replace(new RegExp('\\u00AD', 'g'), '').trim();\r\n    }\r\n\r\n    private replaceForbiddenCharacters(text: string): string {\r\n        return this.removeSoftHyphen(text).replace(this.STRICT_FORBIDDEN_CHARS, '_');\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AACtB,4BAA+B;AAK/B,gCAAmC;AAG5B,MAAM,cAAc;AAAA,EACvB,YAAY,YAAwB,QAAuB,UAAkB,KAAa;AAiG1F,SAAQ,yBAAyB;AAIjC,SAAQ,YAAiC,oBAAI,IAAoB;AACjE,SAAQ,YAAiC,oBAAI,IAAoB;AACjE,SAAQ,aAAkC,oBAAI,IAAoB;AAClE,SAAQ,eAAoC,oBAAI,IAAoB;AACpE,SAAQ,wBAA6C,oBAAI,IAAoB;AAC7E,SAAQ,oCAAsE,oBAAI,IAAiC;AACnH,SAAQ,oBAA8B,CAAC;AACvC,SAAQ,wBAAkC,CAAC;AAtH/C;AAWQ,SAAK,aAAa;AAClB,SAAK,SAAS;AACd,SAAK,MAAM;AAEX,iBAAO,oBAAP,mBAAwB,QAAQ,CAAC,eAA2B;AACxD,UAAI,WAAW,cAAc,WAAW,OAAO;AAC3C,cAAM,cAAc,KAAK,2BAA2B,WAAW,KAAK;AACpE,aAAK,IAAI,MAAM,kBAAkB,WAAW,UAAU,OAAO,WAAW,EAAE;AAC1E,aAAK,UAAU,IAAI,WAAW,YAAY,WAAW;AAAA,MACzD;AAAA,IACJ;AACA,iBAAO,oBAAP,mBAAwB,QAAQ,CAAC,eAA2B;AACxD,UAAI,WAAW,cAAc,WAAW,OAAO;AAC3C,cAAM,cAAc,KAAK,2BAA2B,WAAW,KAAK;AACpE,aAAK,IAAI,MAAM,kBAAkB,WAAW,UAAU,OAAO,WAAW,EAAE;AAC1E,aAAK,UAAU,IAAI,WAAW,YAAY,WAAW;AAAA,MACzD;AAAA,IACJ;AACA,iBAAO,qBAAP,mBAAyB,QAAQ,CAAC,eAA2B;AACzD,UAAI,WAAW,cAAc,WAAW,OAAO;AAC3C,cAAM,cAAc,KAAK,2BAA2B,WAAW,KAAK;AACpE,aAAK,IAAI,MAAM,iBAAiB,WAAW,UAAU,OAAO,WAAW,EAAE;AACzE,aAAK,WAAW,IAAI,WAAW,YAAY,WAAW;AAAA,MAC1D;AAAA,IACJ;AACA,iBAAO,kBAAP,mBAAsB,QAAQ,CAAC,eAA2B;AACtD,UAAI,WAAW,cAAc,WAAW,OAAO;AAC3C,cAAM,QAAQ,KAAK,2BAA2B,WAAW,KAAK;AAC9D,aAAK,IAAI,MAAM,gBAAgB,WAAW,UAAU,OAAO,KAAK,EAAE;AAClE,aAAK,aAAa,IAAI,WAAW,YAAY,KAAK;AAClD,YAAI,WAAW,UAAU;AACrB,gBAAM,WAAW,KAAK,2BAA2B,WAAW,QAAQ;AACpE,eAAK,IAAI,MAAM,yBAAyB,WAAW,UAAU,KAAK,QAAQ,EAAE;AAC5E,eAAK,sBAAsB,IAAI,WAAW,YAAY,QAAQ;AAAA,QAClE;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,aAAqB,OAAO,WAAW,KAAK;AAClD,UAAM,SAAiB,OAAO,OAAO,KAAK;AAC1C,UAAM,cAAsB,OAAO,YAAY,KAAK;AACpD,UAAM,aAAsB,OAAO;AAEnC,QAAI,QAAQ;AACZ,QAAI,cAAc,MAAM,cAAc,MAAM;AACxC,UAAI,cAAc,OAAO;AACrB,aAAK,IAAI,MAAM,qCAAqC;AAAA,MACxD;AACA,cAAQ;AAAA,IACZ;AACA,QAAI,UAAU,MAAM,UAAU,MAAM;AAChC,UAAI,cAAc,OAAO;AACrB,aAAK,IAAI,MAAM,iCAAiC;AAAA,MACpD;AACA,cAAQ;AAAA,IACZ;AACA,QAAI,eAAe,MAAM,eAAe,MAAM;AAC1C,UAAI,cAAc,OAAO;AACrB,aAAK,IAAI,MAAM,uCAAuC;AAAA,MAC1D;AACA,cAAQ;AAAA,IACZ;AACA,QAAI,OAAO;AACP,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACvC;AAEA,UAAM,YAAY,KAAK,KAAK,UAAU,cAAc;AACpD,SAAK,iBAAiB,IAAI;AAAA,MACtB;AAAA,QACI,UAAU;AAAA,QACV,cAAc;AAAA,QACd,2BAA2B,OAAO;AAAA,QAClC,aAAa;AAAA,QACb,UAAU,OAAO,SAAS,KAAK;AAAA,QAC/B,sBAAsB;AAAA,QACtB,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,QACT,WAAW;AAAA,QACX,mBAAmB,IAAI,KAAK;AAAA,MAChC;AAAA,MACA;AAAA,IACJ;AACA,SAAK,qBAAqB,IAAI;AAAA,MAC1B;AAAA,QACI,SAAS;AAAA,QACT,SAAS;AAAA,QACT,WAAW;AAAA,QACX,UAAU,OAAO;AAAA,MACrB;AAAA,MACA,KAAK;AAAA,IACT;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,eAA4C;AAC9C,QAAI;AACA,YAAM,cAAc,MAAM,KAAK,eAAe,oBAAoB;AAClE,YAAM,UAAU,MAAM,KAAK,mBAAmB,0BAA0B,WAAW;AAEnF,UAAI,QAAQ,SAAS;AACjB,mBAAW,SAAS,QAAQ,SAAS;AACjC,gBAAM,KAAK,0BAA0B,OAAO,WAAW;AAAA,QAC3D;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,YAAM,cAAc,GAAG,KAAK;AAC5B,WAAK,IAAI,MAAM,WAAW;AAC1B,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,aAAa,IAAY,OAAmB,UAAkB,aAA4B,WAAiD;AAC7I,QAAI;AACA,YAAM,cAAc,MAAM,KAAK,eAAe,oBAAoB;AAClE,UAAI,aAAa;AACb,cAAM,gBAAgB,MAAM,SAAS;AACrC,YAAI,aAAa;AACb,gBAAM,SAAS,MAAM,KAAK,mBAAmB,oBAAoB,UAAU,aAAa,aAAa,aAAa;AAClH,cAAI,UAAU,eAAe,UAAU,OAAO,WAAW,KAAK,YAAY;AACtE,iBAAK,IAAI,MAAM,aAAa,WAAW,kBAAkB;AACzD,kBAAM,KAAK,WAAW,cAAc,IAAI,KAAK;AAAA,UACjD;AAAA,QACJ,WAAW,cAAc,QAAQ,eAAe;AAC5C,gBAAM,qBAA6C,KAAK,MAAM,aAAa;AAC3E,cAAI,OAAO,KAAK,kBAAkB,EAAE,SAAS,GAAG;AAC5C,kBAAM,SAAS,MAAM,KAAK,mBAAmB,qBAAqB,UAAU,aAAa,kBAAkB;AAC3G,kBAAM,KAAK,WAAW,cAAc,IAAI,KAAK;AAC7C,kBAAM,wBAAwB,KAAK,kCAAkC,IAAI,QAAQ;AACjF,gBAAI,yBAAyB,QAAQ;AACjC,yBAAW,CAACA,cAAaC,MAAK,KAAK,OAAO,QAAQ,kBAAkB,GAAG;AACnE,sBAAM,WAAW,sBAAsB,IAAID,YAAW;AACtD,sBAAM,YAAY,WAAWC,MAAK;AAClC,oBAAI,YAAY,CAAC,OAAO,MAAM,SAAS,KAAKD,gBAAe,UAAU,OAAOA,YAAW,KAAK,YAAY;AACpG,wBAAM,KAAK,WAAW,cAAc,UAAU,SAAS;AAAA,gBAC3D;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,SAAS,OAAO;AACZ,YAAM,cAAc,GAAG,KAAK;AAC5B,WAAK,IAAI,MAAM,WAAW;AAC1B,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAc,0BAA0B,QAA2B,aAAoC;AA5L3G;AA6LQ,QAAI,OAAO,YAAY,UAAa,OAAO,QAAQ,QAAW;AAC1D,YAAM,iBAAiB,KAAK,kBAAkB,SAAS,OAAO,QAAQ;AACtE,YAAM,WAAW,CAAC;AAClB,UAAI,CAAC,gBAAgB;AACjB,aAAK,kBAAkB,KAAK,OAAO,QAAQ;AAAA,MAC/C;AACA,YAAM,WAAW,KAAK,2BAA2B,OAAO,QAAQ;AAChE,YAAM,cAAc,KAAK,UAAU,IAAI,QAAQ;AAC/C,YAAM,aAAa,oCAAe;AAClC,YAAM,aAAa,KAAK,iBAAiB,OAAO,IAAI;AACpD,UAAI,UAAU;AACV,cAAM,KAAK,WAAW,kBAAkB,YAAY,UAAU;AAAA,MAClE;AACA,YAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,aAAa,aAAa,OAAO,UAAU,QAAQ;AAC9G,YAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,SAAS,QAAQ,YAAY,UAAU,WAAW;AAC7G,UAAI,OAAO,WAAW,QAAW;AAC7B,cAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,YAAY,WAAW,OAAO,SAAS,QAAQ;AAAA,MAC9G;AACA,UAAI,OAAO,iBAAiB,QAAW;AACnC,cAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,kBAAkB,kBAAkB,OAAO,eAAe,QAAQ;AAAA,MACjI;AACA,UAAI,OAAO,YAAY,QAAW;AAC9B,cAAM,KAAK,WAAW,yBAAyB,GAAG,UAAU,aAAa,aAAa,mBAAmB,OAAO,UAAU,QAAQ;AAAA,MACtI;AACA,UAAI,OAAO,SAAS;AAChB,mBAAW,UAAU,OAAO,SAAS;AACjC,gBAAM,KAAK,qBAAqB,QAAQ,YAAY,WAAW;AAAA,QACnE;AAAA,MACJ;AAEA,UAAI,KAAK,OAAO,wBAAwB;AACpC,cAAM,gBAAgB,QAAM,UAAK,uBAAL,mBAAyB,4BAA4B,OAAO,UAAU;AAClG,YAAI,KAAK,OAAO,2BAA2B;AACvC,gBAAM,KAAK,WAAW;AAAA,YAClB,GAAG,UAAU;AAAA,YACb;AAAA,YACA,KAAK,UAAU,+CAAe,eAAe,MAAM,EAAE;AAAA,YACrD;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,4BAAoC;AACxC,6DAAe,kBAAf,mBAA8B,QAAQ,CAAC,iBAAwB;AAC3D,uCAA6B,GAAG,aAAa,MAAM,KAAK,aAAa,WAAW;AAAA;AAAA,QACpF;AACA,cAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,wBAAwB,oCAAoC,2BAA2B,QAAQ;AAAA,MAC9J;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,qBAAqB,QAAsB,YAAoB,aAAoC;AA9OrH;AA+OQ,QAAI,OAAO,MAAM,YAAa,YAAO,YAAP,mBAAgB,SAAQ,QAAW;AAC7D,YAAM,cAAc,KAAK,kCAAkC,IAAI,OAAO,EAAE;AACxE,YAAM,WAAW,CAAC;AAClB,YAAM,uBAAuB,oCAAe,oBAAI,IAAoB;AACpE,UAAI,CAAC,aAAa;AACd,aAAK,kCAAkC,IAAI,OAAO,IAAI,oBAAoB;AAAA,MAC9E;AACA,YAAM,WAAW,KAAK,2BAA2B,OAAO,EAAE;AAC1D,YAAM,cAAc,KAAK,UAAU,IAAI,QAAQ;AAC/C,YAAM,gBAAgB,oCAAe;AACrC,YAAM,aAAa,GAAG,UAAU,IAAI,aAAa;AACjD,YAAM,aAAa,KAAK,iBAAiB,OAAO,QAAQ,IAAI;AAC5D,UAAI,UAAU;AACV,cAAM,KAAK,WAAW,kBAAkB,YAAY,UAAU;AAAA,MAClE;AACA,YAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,aAAa,aAAa,OAAO,IAAI,QAAQ;AACxG,YAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,SAAS,QAAQ,YAAY,UAAU,WAAW;AAC7G,UAAI,OAAO,mBAAmB,QAAW;AACrC,cAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,oBAAoB,oBAAoB,OAAO,iBAAiB,UAAU,aAAa;AAAA,MACtJ;AACA,UAAI,OAAO,oBAAoB,QAAW;AACtC,cAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,qBAAqB,4BAA4B,OAAO,kBAAkB,UAAU,eAAe;AAAA,MAClK;AACA,YAAI,YAAO,YAAP,mBAAgB,iBAAgB,QAAW;AAC3C,cAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,iBAAiB,iBAAiB,OAAO,QAAQ,cAAc,UAAU,aAAa;AAAA,MACrJ;AAEA,UAAI,KAAK,OAAO,SAAS;AACrB,cAAM,eAAe,QAAM,UAAK,uBAAL,mBAAyB,qBAAqB,OAAO,IAAI;AACpF,YAAI,KAAK,OAAO,YAAY;AACxB,gBAAM,KAAK,WAAW,wBAAwB,GAAG,UAAU,YAAY,uCAAuC,KAAK,UAAU,cAAc,MAAM,EAAE,GAAG,QAAQ;AAAA,QAClK;AACA,YAAI,cAAc;AACd,qBAAW,QAAQ,cAAc;AAC7B,kBAAM,KAAK,sBAAsB,MAAM,YAAY,OAAO,IAAI,oBAAoB;AAAA,UACtF;AAAA,QACJ;AACA,YAAI,UAAU;AACV,gBAAM,KAAK,WAAW,gCAAgC,GAAG,UAAU,YAAY,mCAAmC,QAAQ,OAAO,EAAE;AAAA,QACvI;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,sBAAsB,MAAqB,YAAoB,UAAqC,sBAA0D;AA3RhL;AA4RQ,QAAI,KAAK,aAAa;AAClB,YAAM,mBAAmB,qBAAqB,IAAI,KAAK,WAAW;AAClE,YAAM,UAAU,8CAAqB,MAAM,KAAK,kCAAkC,KAAK,aAAa,KAAK,UAAU,UAAU;AAC7H,UAAI,CAAC,kBAAkB;AACnB,6BAAqB,IAAI,KAAK,aAAa,OAAO;AAClD,cAAM,KAAK,2BAA2B,MAAM,UAAU,OAAO;AAAA,MAEjE;AAEA,YAAM,KAAK,WAAW,cAAc,UAAS,UAAK,UAAL,YAAc,IAAI;AAAA,IACnE;AAAA,EACJ;AAAA,EAEA,MAAc,kCAAkC,aAAqB,UAAqC,YAAqC;AAzSnJ;AA0SQ,UAAM,oBAAmB,UAAK,aAAa,IAAI,WAAW,MAAjC,YAAsC,KAAK,2BAA2B,WAAW;AAC1G,UAAM,cAAc,KAAK,sBAAsB,IAAI,WAAW;AAC9D,QAAI,kBAAiC;AACrC,QAAI,aAAa;AACb,wBAAkB;AAAA,IACtB,WAAW,YAAY,KAAK,OAAO,WAAW;AAC1C,YAAM,aAAa,KAAK,2BAA2B,QAAQ;AAC3D,yBAAkB,gBAAK,WAAW,IAAI,QAAQ,MAA5B,YAAiC,KAAK,WAAW,IAAI,UAAU,MAA/D,YAAoE;AAAA,IAC1F;AACA,QAAI,iBAAiB;AACjB,YAAM,eAAe,GAAG,UAAU,IAAI,eAAe;AACrD,UAAI,CAAC,KAAK,sBAAsB,SAAS,YAAY,GAAG;AACpD,aAAK,sBAAsB,KAAK,YAAY;AAC5C,cAAM,KAAK,WAAW,oBAAoB,eAAc,yCAAe,aAAf,YAA2B,eAAe;AAAA,MACtG;AACA,aAAO,GAAG,UAAU,IAAI,eAAe,IAAI,gBAAgB;AAAA,IAC/D,OAAO;AACH,aAAO,GAAG,UAAU,IAAI,gBAAgB;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEA,MAAc,2BAA2B,MAAqB,UAAqC,SAAgC;AA/TvI;AAgUQ,QAAI,OAAO;AACX,QAAI,OAA2B;AAC/B,QAAI,KAAK,eAAe;AACpB,aAAO,KAAK;AACZ,cAAQ,KAAK,eAAe;AAAA,QACxB,KAAK;AAAA,QACL,KAAK;AACD,iBAAO;AACP;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AACD,iBAAO;AACP;AAAA,QACJ,KAAK;AACD,iBAAO;AACP;AAAA,QACJ,KAAK;AACD,iBAAO;AACP;AAAA,QACJ,KAAK;AACD,iBAAO;AACP;AAAA,QACJ,KAAK;AACD,iBAAO;AACP;AAAA,QACJ,KAAK;AACD,iBAAO;AACP,iBAAO;AACP;AAAA,QACJ,KAAK;AACD,iBAAO;AACP;AAAA,MACR;AAAA,IACJ;AACA,QAAI,SAA6C;AACjD,QAAI,KAAK,cAAc,KAAK,WAAW,SAAS,GAAG;AAC/C,eAAS,CAAC;AACV,iBAAW,aAAa,KAAK,YAAY;AACrC,YAAI,UAAU,QAAQ,UAAU,OAAO;AACnC,iBAAO,UAAU,KAAK,IAAI,KAAK,iBAAiB,UAAU,IAAI;AAAA,QAClE;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,kBAAiB,UAAK,kBAAL,YAAsB,EAAE;AAC3D,UAAM,YAAW,UAAK,aAAL,YAAiB;AAClC,QAAI,MAA0B;AAC9B,QAAI,MAA0B;AAC9B,QAAI,KAAK,YAAY,QAAQ,KAAK,YAAY,MAAM;AAChD,UAAI,KAAK,WAAW,KAAK,UAAU;AAC/B,YAAI,KAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,YAAY,KAAK,QAAQ,KAAK,WAAW;AAClF,eAAK,IAAI;AAAA,YACL,cAAc,KAAK,WAAW,uCAAuC,KAAK,KAAK,UAAU,KAAK,QAAQ,UAAU,KAAK,QAAQ;AAAA,UACjI;AAAA,QACJ,OAAO;AACH,gBAAM,KAAK;AACX,gBAAM,KAAK;AAAA,QACf;AAAA,MACJ,OAAO;AACH,aAAK,IAAI,KAAK,cAAc,KAAK,WAAW,mCAAmC,KAAK,QAAQ,UAAU,KAAK,QAAQ,qBAAqB;AAAA,MAC5I;AAAA,IACJ;AACA,UAAM,QAAO,UAAK,cAAL,YAAkB;AAC/B,UAAM,KAAK,WAAW,mCAAmC,SAAS,MAAM,UAAU,KAAK,aAAa,MAAM,UAAU,MAAM,KAAK,KAAK,MAAM,MAAM;AAAA,EACpJ;AAAA,EAEQ,iBAAiB,MAAsB;AAC3C,WAAO,KAAK,QAAQ,IAAI,OAAO,QAAU,GAAG,GAAG,EAAE,EAAE,KAAK;AAAA,EAC5D;AAAA,EAEQ,2BAA2B,MAAsB;AACrD,WAAO,KAAK,iBAAiB,IAAI,EAAE,QAAQ,KAAK,wBAAwB,GAAG;AAAA,EAC/E;AACJ;",
  "names": ["parameterId", "value"]
}
